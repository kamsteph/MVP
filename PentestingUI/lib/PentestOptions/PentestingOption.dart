import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:lucide_icons/lucide_icons.dart';
import 'package:pentest/KaliaPentesting/NetworkPentest.dart';
import 'package:pentest/PentestOptions/NetworkPentestAreas.dart';
import 'package:pentest/PentestOptions/WebPentestingAreas.dart';

import '../CustomColorBackground/ColorBackground.dart';
import '../DTO/AttackSurface.dart';

class VulnerabilityScannerApp extends StatelessWidget {
  const VulnerabilityScannerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Vulnerability Scanner',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        textTheme: GoogleFonts.poppinsTextTheme(),
      ),
      home: const ScannerSelectionPage(),
    );
  }
}

class ScannerSelectionPage extends StatefulWidget {
  const ScannerSelectionPage({super.key});

  @override
  State<ScannerSelectionPage> createState() => _ScannerSelectionPageState();
}

class _ScannerSelectionPageState extends State<ScannerSelectionPage>
    with TickerProviderStateMixin {
  bool isNetworkSelected = false;
  bool isWebSelected = false;
  late AnimationController _fadeController;
  late AnimationController _scaleController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fadeController, curve: Curves.easeInOut),
    );

    _scaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.elasticOut),
    );

    _fadeController.forward();
    _scaleController.forward();
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _scaleController.dispose();
    super.dispose();
  }

  void toggleScanner(String type) {
    setState(() {
      if (type == 'network') {
        isNetworkSelected = !isNetworkSelected;
        if (isNetworkSelected) isWebSelected = false;
      } else if (type == 'web') {
        isWebSelected = !isWebSelected;
        if (isWebSelected) isNetworkSelected = false;
      }
    });
  }

  void proceedToNext() {
    if (isNetworkSelected) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => const NetworkScanPage(
            attackSurface: AttackSurface.full(),
          ),
        ),
      );
    } else if (isWebSelected) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const WebPentestAreasPage()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.distinctGitHubBackground,
      body: SafeArea(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 20.0),
            child: Column(
              children: [
                // Header Section
                _buildHeader(),

                const SizedBox(height: 40),

                // Title Section
                _buildTitle(),

                const SizedBox(height: 50),

                // Scanner Options
                Expanded(
                  child: ScaleTransition(
                    scale: _scaleAnimation,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        _buildScannerCard(
                          type: 'network',
                          isSelected: isNetworkSelected,
                          icon: LucideIcons.wifi,
                          title: 'Network Penetration Test',
                          description: 'Scan network infrastructure and services',
                          gradient: const LinearGradient(
                            colors: [Color(0xFF667eea), Color(0xFF764ba2)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                        ),

                        const SizedBox(height: 24),

                        _buildScannerCard(
                          type: 'web',
                          isSelected: isWebSelected,
                          icon: LucideIcons.globe,
                          title: 'Web Application Test',
                          description: 'Analyze web applications for vulnerabilities',
                          gradient: const LinearGradient(
                            colors: [Color(0xFFf093fb), Color(0xFFf5576c)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                const SizedBox(height: 30),

                // Next Button
                _buildNextButton(),

                const SizedBox(height: 20),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      children: [
        Hero(
          tag: 'logo',
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.blue.withOpacity(0.3),
                  blurRadius: 20,
                  offset: const Offset(0, 10),
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: SizedBox(
                width: 70,
                height: 70,
                child: Image.asset(
                  "assets/3d-shape-glowing-with-bright-holographic-colors.jpg",
                  fit: BoxFit.cover,
                ),
              ),
            ),
          ),
        ),
        const SizedBox(width: 16),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Kalia",
              style: GoogleFonts.orbitron(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                letterSpacing: 2,
              ),
            ),
            Text(
              "Security Platform",
              style: GoogleFonts.poppins(
                fontSize: 12,
                color: Colors.grey[600],
                letterSpacing: 1,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildTitle() {
    return Column(
      children: [
        Text(
          'Select Penetration Test',
          style: GoogleFonts.poppins(
            fontSize: 26,
            fontWeight: FontWeight.w700,
            letterSpacing: 0.5,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          'Choose your preferred security assessment method',
          textAlign: TextAlign.center,
          style: GoogleFonts.poppins(
            fontSize: 14,
            color: Colors.grey[600],
            fontWeight: FontWeight.w400,
          ),
        ),
      ],
    );
  }

  Widget _buildScannerCard({
    required String type,
    required bool isSelected,
    required IconData icon,
    required String title,
    required String description,
    required Gradient gradient,
  }) {
    return GestureDetector(
      onTap: () => toggleScanner(type),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
        height: 160,
        decoration: BoxDecoration(
          gradient: isSelected ? gradient : null,
          color: isSelected ? null : Colors.grey[100],
          borderRadius: BorderRadius.circular(24),
          border: Border.all(
            color: isSelected ? Colors.transparent : Colors.grey[300]!,
            width: 2,
          ),
          boxShadow: [
            BoxShadow(
              color: isSelected
                  ? gradient.colors.first.withOpacity(0.4)
                  : Colors.grey.withOpacity(0.1),
              blurRadius: isSelected ? 30 : 10,
              offset: Offset(0, isSelected ? 15 : 5),
            ),
          ],
        ),
        child: Stack(
          children: [
            // Animated background pattern
            if (isSelected)
              Positioned.fill(
                child: CustomPaint(
                  painter: GridPatternPainter(
                    color: Colors.white.withOpacity(0.1),
                  ),
                ),
              ),

            Padding(
              padding: const EdgeInsets.all(24.0),
              child: Row(
                children: [
                  // Icon Container
                  Container(
                    width: 70,
                    height: 70,
                    decoration: BoxDecoration(
                      color: isSelected
                          ? Colors.white.withOpacity(0.2)
                          : Colors.grey[300],
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Icon(
                      icon,
                      size: 36,
                      color: isSelected ? Colors.white : Colors.grey[700],
                    ),
                  ),

                  const SizedBox(width: 20),

                  // Text Content
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          title,
                          style: GoogleFonts.poppins(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: isSelected ? Colors.white : Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          description,
                          style: GoogleFonts.poppins(
                            fontSize: 13,
                            color: isSelected
                                ? Colors.white.withOpacity(0.9)
                                : Colors.grey[600],
                            height: 1.4,
                          ),
                        ),
                      ],
                    ),
                  ),

                  // Checkmark
                  AnimatedOpacity(
                    duration: const Duration(milliseconds: 300),
                    opacity: isSelected ? 1.0 : 0.0,
                    child: Container(
                      width: 32,
                      height: 32,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        shape: BoxShape.circle,
                      ),
                      child: Icon(
                        Icons.check,
                        color: gradient.colors.first,
                        size: 20,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNextButton() {
    final hasSelection = isWebSelected || isNetworkSelected;

    return AnimatedOpacity(
      duration: const Duration(milliseconds: 300),
      opacity: hasSelection ? 1.0 : 0.3,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        width: hasSelection ? MediaQuery.of(context).size.width - 48 : 200,
        height: 60,
        child: ElevatedButton(
          onPressed: hasSelection ? proceedToNext : null,
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF667eea),
            disabledBackgroundColor: Colors.grey[300],
            foregroundColor: Colors.white,
            elevation: hasSelection ? 8 : 0,
            shadowColor: const Color(0xFF667eea).withOpacity(0.5),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Continue to Scan',
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  letterSpacing: 0.5,
                ),
              ),
              const SizedBox(width: 12),
              Icon(
                LucideIcons.arrowRight,
                size: 20,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom painter for grid pattern
class GridPatternPainter extends CustomPainter {
  final Color color;

  GridPatternPainter({required this.color});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..strokeWidth = 1
      ..style = PaintingStyle.stroke;

    const spacing = 20.0;

    for (double i = 0; i < size.width; i += spacing) {
      canvas.drawLine(
        Offset(i, 0),
        Offset(i, size.height),
        paint,
      );
    }

    for (double i = 0; i < size.height; i += spacing) {
      canvas.drawLine(
        Offset(0, i),
        Offset(size.width, i),
        paint,
      );
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}