import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

import '../DTO/AttackSurface.dart';
import '../DTO/ToolChoice.dart';
import '../constants/network_categories.dart';
import 'LLMHelpPage.dart';

class NetworkPentestAreasPage extends StatefulWidget{
  final ScopeConfig scopeCard;
  const NetworkPentestAreasPage({super.key,required this.scopeCard});

  @override
  State<NetworkPentestAreasPage> createState() =>
      _NetworkPentestAreasPageState();
}

class _NetworkPentestAreasPageState extends State<NetworkPentestAreasPage> {

  final List<Map<String, dynamic>> networkAreas = [
    {"name": "Open ports", "icon": Icons.router},
    {"name": "Network services (SMB, FTP, DNS, SNMP)", "icon": Icons.dns},
    {"name": "Firewalls, IDS/IPS", "icon": Icons.security},
    {"name": "Routers/switches", "icon": Icons.settings_ethernet},
    {"name": "Wireless networks", "icon": Icons.wifi},
    {"name": "VPN gateways", "icon": Icons.vpn_lock},
    {"name": "Load balancers", "icon": Icons.swap_horiz},
    {"name": "Email servers", "icon": Icons.email},
    {"name": "Web servers & proxies", "icon": Icons.cloud},
    {"name": "Databases", "icon": Icons.storage},
  ];

  final Set<String> _selectedAreas = {};
  bool _isFullPentest = false;

  void _toggleAreaSelection(String category, String area) {
    setState(() {
      final selectedAreas = widget.scopeCard.selectedAreas;
      selectedAreas.putIfAbsent(category, () => []);
      if (selectedAreas[category]!.contains(area)) {
        selectedAreas[category]!.remove(area);
        if (selectedAreas[category]!.isEmpty) {
          selectedAreas.remove(category);
        }
      } else {
        selectedAreas[category]!.add(area);
      }

      _isFullPentest = false;
      widget.scopeCard.isFullPentest = _isFullPentest;
    });
  }

  void _toggleFullPentest() {
    setState(() {
      _isFullPentest = !_isFullPentest;
      widget.scopeCard.isFullPentest = _isFullPentest;
      if (_isFullPentest) widget.scopeCard.selectedAreas.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    const double borderRadiusValue = 20;
    final selectedCount = widget.scopeCard.selectedAreas.values.fold<int>(
        0, (sum, areas) => sum + areas.length
    );

    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new, color: Colors.grey.shade800),
          onPressed: () => Navigator.pop(context),
        ),
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Network Pentest",
              style: GoogleFonts.poppins(
                fontSize: 20,
                fontWeight: FontWeight.w700,
                color: Colors.grey.shade900,
              ),
            ),
            Text(
              "Select attack surface areas",
              style: GoogleFonts.poppins(
                fontSize: 12,
                fontWeight: FontWeight.w400,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ),
        centerTitle: false,
      ),
      body: Column(
        children: [
          // Progress indicator
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade200,
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: _isFullPentest ? Colors.blue.shade50 : Colors.orange.shade50,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(
                    _isFullPentest ? Icons.check_circle : Icons.touch_app,
                    color: _isFullPentest ? Colors.blue.shade700 : Colors.orange.shade700,
                    size: 24,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _isFullPentest ? "Full Pentest Mode" : "Custom Selection",
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        _isFullPentest
                            ? "All areas will be tested"
                            : "$selectedCount area${selectedCount != 1 ? 's' : ''} selected",
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: Colors.grey.shade600,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  // Select All Button
                  Container(
                    width: 1000,
                    decoration: BoxDecoration(
                      gradient: _isFullPentest
                          ? LinearGradient(
                        colors: [Colors.blue.shade700, Colors.blue.shade900],
                      )
                          : null,
                      color: _isFullPentest ? null : Colors.white,
                      borderRadius: BorderRadius.circular(borderRadiusValue),
                      border: Border.all(
                        color: _isFullPentest ? Colors.transparent : Colors.blue.shade300,
                        width: 2,
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: _isFullPentest
                              ? Colors.blue.shade200.withOpacity(0.5)
                              : Colors.grey.shade200,
                          blurRadius: 12,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Material(
                      color: Colors.transparent,
                      child: InkWell(
                        onTap: _toggleFullPentest,
                        borderRadius: BorderRadius.circular(borderRadiusValue),
                        child: Padding(
                          padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 20),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                _isFullPentest ? Icons.check_circle : Icons.select_all,
                                color: _isFullPentest ? Colors.white : Colors.blue.shade700,
                                size: 24,
                              ),
                              const SizedBox(width: 12),
                              Text(
                                _isFullPentest ? "Full Pentest Enabled" : "Enable Full Pentest",
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: _isFullPentest ? Colors.white : Colors.blue.shade700,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),

                  // Grid of cards
                  Expanded(
                    child: Center(
                      child: ConstrainedBox(
                        constraints: const BoxConstraints(maxWidth: 1000),
                        child: GridView.builder(
                          itemCount: networkCategories.length,
                          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                            mainAxisExtent: 220,
                            crossAxisCount: 2,
                            crossAxisSpacing: 16,
                            mainAxisSpacing: 16,
                          ),
                          itemBuilder: (context, index) {
                            final categoryName = networkCategories.keys.elementAt(index);
                            final category = networkCategories[categoryName]!;
                            final icon = category["icon"] as IconData;
                            final hasSelection = widget.scopeCard.selectedAreas.containsKey(categoryName);

                            return GestureDetector(
                              onTap: () async {
                                await Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => NetworkAreas(
                                      categoryName: categoryName,
                                      areas: List<Map<String, dynamic>>.from(category["areas"]),
                                      scopeCard: widget.scopeCard,
                                    ),
                                  ),
                                );
                                setState(() {});
                              },
                              child: Container(
                                decoration: BoxDecoration(
                                  gradient: hasSelection
                                      ? LinearGradient(
                                    colors: [Colors.green.shade400, Colors.green.shade600],
                                    begin: Alignment.topLeft,
                                    end: Alignment.bottomRight,
                                  )
                                      : null,
                                  color: hasSelection ? null : Colors.white,
                                  borderRadius: BorderRadius.circular(borderRadiusValue),
                                  boxShadow: [
                                    BoxShadow(
                                      color: hasSelection
                                          ? Colors.green.shade200.withOpacity(0.5)
                                          : Colors.grey.shade200,
                                      blurRadius: 12,
                                      offset: const Offset(0, 4),
                                    ),
                                  ],
                                ),
                                child: Stack(
                                  children: [
                                    Center(
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                          Container(
                                            padding: const EdgeInsets.all(16),
                                            decoration: BoxDecoration(
                                              color: hasSelection
                                                  ? Colors.white.withOpacity(0.2)
                                                  : Colors.blue.shade50,
                                              shape: BoxShape.circle,
                                            ),
                                            child: Icon(
                                              icon,
                                              size: 40,
                                              color: hasSelection ? Colors.white : Colors.blue.shade700,
                                            ),
                                          ),
                                          const SizedBox(height: 16),
                                          Padding(
                                            padding: const EdgeInsets.symmetric(horizontal: 12),
                                            child: Text(
                                              categoryName,
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.poppins(
                                                fontSize: 15,
                                                fontWeight: FontWeight.w600,
                                                color: hasSelection ? Colors.white : Colors.grey.shade900,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    if (hasSelection)
                                      Positioned(
                                        top: 12,
                                        right: 12,
                                        child: Container(
                                          padding: const EdgeInsets.all(6),
                                          decoration: const BoxDecoration(
                                            color: Colors.white,
                                            shape: BoxShape.circle,
                                          ),
                                          child: Icon(
                                            Icons.check,
                                            size: 16,
                                            color: Colors.green.shade700,
                                          ),
                                        ),
                                      ),
                                    Positioned(
                                      bottom: 12,
                                      right: 12,
                                      child: Icon(
                                        Icons.arrow_forward_ios,
                                        size: 16,
                                        color: hasSelection
                                            ? Colors.white.withOpacity(0.7)
                                            : Colors.grey.shade400,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          // Bottom Continue Button
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade300,
                  blurRadius: 12,
                  offset: const Offset(0, -2),
                ),
              ],
            ),
            child: SafeArea(
              child: SizedBox(
                width: 1000,
                child: ElevatedButton(
                  onPressed: (!_isFullPentest && widget.scopeCard.selectedAreas.isEmpty)
                      ? null
                      : () {
                    final attackSurface = _isFullPentest
                        ? const AttackSurface.full()
                        : AttackSurface.custom(_selectedAreas.toList());
                    Navigator.pop(context, attackSurface);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green.shade600,
                    disabledBackgroundColor: Colors.grey.shade300,
                    minimumSize: const Size(double.infinity, 56),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    elevation: 0,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        "Continue",
                        style: GoogleFonts.poppins(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(width: 8),
                      const Icon(Icons.arrow_forward, size: 20),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class NetworkAreas extends StatefulWidget {
  final String categoryName;
  final List<Map<String, dynamic>> areas;
  final ScopeConfig scopeCard;

  const NetworkAreas({
    super.key,
    required this.categoryName,
    required this.areas,
    required this.scopeCard,
  });

  @override
  State<NetworkAreas> createState() => _NetworkAreasState();
}

class _NetworkAreasState extends State<NetworkAreas> {
  final Set<String> _selectedAreas = {};
  bool _isFullPentest = false;

  void _toggleAreaSelection(String area) {
    setState(() {
      final selectedAreas = widget.scopeCard.selectedAreas;
      selectedAreas.putIfAbsent(widget.categoryName, () => []);
      if (selectedAreas[widget.categoryName]!.contains(area)) {
        selectedAreas[widget.categoryName]!.remove(area);
        if (selectedAreas[widget.categoryName]!.isEmpty) {
          selectedAreas.remove(widget.categoryName);
        }
      } else {
        selectedAreas[widget.categoryName]!.add(area);
      }
      _isFullPentest = false;
    });
  }

  void _toggleFullPentest() {
    setState(() {
      _isFullPentest = !_isFullPentest;
      if (_isFullPentest) _selectedAreas.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    const double borderRadiusValue = 20;
    final selectedCount = widget.scopeCard.selectedAreas[widget.categoryName]?.length ?? 0;

    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new, color: Colors.grey.shade800),
          onPressed: () => Navigator.pop(context),
        ),
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              widget.categoryName,
              style: GoogleFonts.poppins(
                fontSize: 20,
                fontWeight: FontWeight.w700,
                color: Colors.grey.shade900,
              ),
            ),
            Text(
              "$selectedCount of ${widget.areas.length} selected",
              style: GoogleFonts.poppins(
                fontSize: 12,
                fontWeight: FontWeight.w400,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ),
        centerTitle: false,
      ),
      body: Column(
        children: [
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  // Full Pentest Button
                  Container(
                    width: 1000,
                    decoration: BoxDecoration(
                      gradient: _isFullPentest
                          ? LinearGradient(
                        colors: [Colors.blue.shade700, Colors.blue.shade900],
                      )
                          : null,
                      color: _isFullPentest ? null : Colors.white,
                      borderRadius: BorderRadius.circular(borderRadiusValue),
                      border: Border.all(
                        color: _isFullPentest ? Colors.transparent : Colors.blue.shade300,
                        width: 2,
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: _isFullPentest
                              ? Colors.blue.shade200.withOpacity(0.5)
                              : Colors.grey.shade200,
                          blurRadius: 12,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Material(
                      color: Colors.transparent,
                      child: InkWell(
                        onTap: _toggleFullPentest,
                        borderRadius: BorderRadius.circular(borderRadiusValue),
                        child: Padding(
                          padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 20),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                _isFullPentest ? Icons.check_circle : Icons.select_all,
                                color: _isFullPentest ? Colors.white : Colors.blue.shade700,
                                size: 24,
                              ),
                              const SizedBox(width: 12),
                              Text(
                                _isFullPentest ? "Full Category Selected" : "Select All in Category",
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: _isFullPentest ? Colors.white : Colors.blue.shade700,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),

                  // Areas Grid
                  Expanded(
                    child: Center(
                      child: ConstrainedBox(
                        constraints: const BoxConstraints(maxWidth: 1000),
                        child: GridView.builder(
                          itemCount: widget.areas.length,
                          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                            mainAxisExtent: 220,
                            crossAxisCount: 2,
                            crossAxisSpacing: 16,
                            mainAxisSpacing: 16,
                          ),
                          itemBuilder: (context, index) {
                            final area = widget.areas[index]["name"];
                            final icon = widget.areas[index]["icon"];
                            final isSelected = widget.scopeCard.selectedAreas[widget.categoryName]?.contains(area) ?? false;

                            return GestureDetector(
                              onTap: () => _toggleAreaSelection(area),
                              child: AnimatedContainer(
                                duration: const Duration(milliseconds: 200),
                                decoration: BoxDecoration(
                                  gradient: isSelected
                                      ? LinearGradient(
                                    colors: [Colors.green.shade400, Colors.green.shade600],
                                    begin: Alignment.topLeft,
                                    end: Alignment.bottomRight,
                                  )
                                      : null,
                                  color: isSelected ? null : Colors.white,
                                  borderRadius: BorderRadius.circular(borderRadiusValue),
                                  border: Border.all(
                                    color: isSelected ? Colors.green.shade700 : Colors.grey.shade200,
                                    width: isSelected ? 2 : 1,
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      color: isSelected
                                          ? Colors.green.shade200.withOpacity(0.5)
                                          : Colors.grey.shade200,
                                      blurRadius: isSelected ? 16 : 8,
                                      offset: const Offset(0, 4),
                                    ),
                                  ],
                                ),
                                child: Stack(
                                  children: [
                                    Padding(
                                      padding: const EdgeInsets.all(16),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                          Container(
                                            padding: const EdgeInsets.all(16),
                                            decoration: BoxDecoration(
                                              color: isSelected
                                                  ? Colors.white.withOpacity(0.2)
                                                  : Colors.blue.shade50,
                                              shape: BoxShape.circle,
                                            ),
                                            child: Icon(
                                              icon,
                                              size: 36,
                                              color: isSelected ? Colors.white : Colors.blue.shade700,
                                            ),
                                          ),
                                          const SizedBox(height: 16),
                                          Text(
                                            area,
                                            textAlign: TextAlign.center,
                                            maxLines: 3,
                                            overflow: TextOverflow.ellipsis,
                                            style: GoogleFonts.poppins(
                                              fontSize: 14,
                                              fontWeight: FontWeight.w600,
                                              color: isSelected ? Colors.white : Colors.grey.shade900,
                                              height: 1.3,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    if (isSelected)
                                      Positioned(
                                        top: 12,
                                        right: 12,
                                        child: Container(
                                          padding: const EdgeInsets.all(6),
                                          decoration: const BoxDecoration(
                                            color: Colors.white,
                                            shape: BoxShape.circle,
                                          ),
                                          child: Icon(
                                            Icons.check,
                                            size: 16,
                                            color: Colors.green.shade700,
                                          ),
                                        ),
                                      ),
                                  ],
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ),

                  // Help button
                  const SizedBox(height: 16),
                  TextButton.icon(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => const LLMSurfaceHelpPage(),
                        ),
                      );
                    },
                    icon: Icon(Icons.help_outline, color: Colors.blue.shade700, size: 20),
                    label: Text(
                      "Don't understand? Describe in your own words",
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        color: Colors.blue.shade700,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          // Continue Button
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade300,
                  blurRadius: 12,
                  offset: const Offset(0, -2),
                ),
              ],
            ),
            child: SafeArea(
              child: SizedBox(
                width: 1000,
                child: ElevatedButton(
                  onPressed: (!_isFullPentest && (widget.scopeCard.selectedAreas[widget.categoryName]?.isEmpty ?? true))
                      ? null
                      : () {
                    final attackSurface = _isFullPentest
                        ? const AttackSurface.full()
                        : AttackSurface.custom(_selectedAreas.toList());
                    Navigator.pop(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green.shade600,
                    disabledBackgroundColor: Colors.grey.shade300,
                    minimumSize: const Size(double.infinity, 56),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    elevation: 0,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        "Continue",
                        style: GoogleFonts.poppins(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(width: 8),
                      const Icon(Icons.arrow_forward, size: 20),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}