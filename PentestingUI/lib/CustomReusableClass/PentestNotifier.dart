import 'dart:convert';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;
import '../DTO/PentestModel.dart';

// change this to your backend address (FastAPI)
const String apiBase = "http://127.0.0.1:8000";

final pentestProvider =
StateNotifierProvider<PentestNotifier, List<PentestTask>>((ref) {
  return PentestNotifier();
});

class PentestNotifier extends StateNotifier<List<PentestTask>> {
  PentestNotifier() : super([]);

  void addPentest(PentestTask task) {
    state = [...state, task];
  }

  void updatePentest(
      String id, {
        String? status,
        String? progressMessage,
        double? duration,
        int? threatsFound,
        String? riskLevel,
        String? summary,
      }) {
    state = [
      for (final t in state)
        if (t.id == id)
          t.copyWith(
            status: status,
            progressMessage: progressMessage,
            duration: duration,
            threatsFound: threatsFound,
            riskLevel: riskLevel,
            summary: summary,
          )
        else
          t,
    ];
  }

  void removePentest(String id) {
    state = state.where((t) => t.id != id).toList();
  }

  Future<void> fetchProgress(String taskId) async {
    try {
      final res = await http.get(Uri.parse("$apiBase/progress/$taskId"));
      if (res.statusCode == 200) {
        final data = jsonDecode(res.body);
        final PentestTask updatedTask = PentestTask.fromJson(data);

        final exists = state.any((t) => t.id == taskId);
        if (exists) {
          // update in place
          updatePentest(
            taskId,
            status: updatedTask.status,
            progressMessage: updatedTask.progressMessage,
            duration: updatedTask.duration,
            threatsFound: updatedTask.threatsFound,
            riskLevel: updatedTask.riskLevel,
            summary: updatedTask.summary,
          );
        } else {
          addPentest(updatedTask);
        }
      } else {
        print("⚠️ Progress fetch failed: ${res.statusCode}");
      }
    } catch (e) {
      print("❌ Error fetching progress: $e");
    }
  }
}
