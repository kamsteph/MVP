import 'dart:convert';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

import 'PentestNotifier.dart';

class EventBusBridge {
  final WidgetRef ref;
  final WebSocketChannel channel;

  EventBusBridge(this.ref, this.channel) {
    channel.stream.listen((event) {
      final data = jsonDecode(event);
      final String? type = data['event'];
      final payload = data['payload'];

      if (type == "scan_result") {
        ref.read(pentestProvider.notifier).updatePentest(
          payload["task_id"],
          progressMessage: "Partial result from ${payload['tool']}",
        );
      } else if (type == "scan_progress") {
        ref.read(pentestProvider.notifier).updatePentest(
          payload["task_id"] ?? "unknown",
          progressMessage: payload["message"] ?? "No message",
          //payload["task_id"],
          //progressMessage: payload["message"],
          status: "running",
        );
      } else if (type == "scan_complete") {
        ref.read(pentestProvider.notifier).updatePentest(
          payload["task_id"],
          status: payload["status"] ?? "completed",
          progressMessage: "Scan finished",
        );
      } else if (type == "task_completed") {
        ref.read(pentestProvider.notifier).updatePentest(
          payload["id"],
          status: payload["status"] ?? "completed",
          progressMessage: "Final report generated",
          duration: payload["time_taken"]?.toDouble(),
          threatsFound: payload["threats_found"],
          riskLevel: payload["risk_level"],
          summary: payload["summary"],
        );
      }
    });
  }
/// --- JWT-AWARE CONNECTION (for later) ---
/// When JWT auth is enabled on the backend WebSocket:
/// - Obtain a token from the login API.
/// - Attach it to the WebSocket connection via header or query parameter.
///
/// Example:
/// ```dart
/// final jwt = await secureStorage.read(key: 'jwt');
/// final channel = IOWebSocketChannel.connect(
///   Uri.parse('wss://192.168.106.154:3000/ws?token=$jwt'),
///   headers: {
///     'Authorization': 'Bearer $jwt',
///   },
/// );
/// final bridge = EventBusBridge(ref, channel);
/// ```
///
/// Then, backend verifies token before accepting connection.
}
