import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../DTO/PentestModel.dart';
import '../KaliaPentestingApi/FileUploadApi.dart';
import '../constants/colorCategories.dart';
import 'PentestNotifier.dart';

class PentestProgressPage extends ConsumerStatefulWidget {
  final String taskId;
  const PentestProgressPage({super.key, required this.taskId});

  @override
  ConsumerState<PentestProgressPage> createState() => _PentestProgressPageState();
}

class _PentestProgressPageState extends ConsumerState<PentestProgressPage>
    with SingleTickerProviderStateMixin {
  late AnimationController _pulseController;
  Timer? _timer;


  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    )..repeat(reverse: true);

    _timer = Timer.periodic(const Duration(seconds: 3), (_) async {
      await ref.read(pentestProvider.notifier).fetchProgress(widget.taskId);
    });
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _timer?.cancel();
    super.dispose();
  }

  double _getProgressValue(String status, {int? progressPercent}) {

    // If backend provides explicit percent, use it (clamped 0..100)
    if (progressPercent != null) {
      final p = progressPercent.clamp(0, 100);
      return (p / 100.0);
    }

    final s = status.toLowerCase();

    // Map textual sub-stages to ranges and return a sensible value
    if (s.contains('complete') || s.contains('done') || s.contains('finished')) return 1.0;
    if (s.contains('running') || s.contains('processing')) {
      // if message contains more granular words, nudge accordingly
      if (s.contains('discovery') || s.contains('recon')) return 0.25;
      if (s.contains('scanning') || s.contains('enumeration')) return 0.45;
      if (s.contains('service') || s.contains('fingerprinting')) return 0.65;
      if (s.contains('analysis') || s.contains('aggregation')) return 0.82;
      return 0.55; // default running fallback
    }
    if (s.contains('pending') || s.contains('queued')) return 0.08;
    if (s.contains('error') || s.contains('failed')) return 0.0;
    return 0.0;
  }

  // double _getProgressValue(String status) {
  //   final s = status.toLowerCase();
  //   if (s.contains("complete")) return 1.0;
  //   if (s.contains("done")) return 1.0;
  //   if (s.contains("running") || s.contains("processing"))
  //     return 0.85; // smoother feel
  //   if (s.contains("pending") || s.contains("queued")) return 0.25;
  //   if (s.contains("error") || s.contains("failed")) return 0.3;
  //   return 0.0;
  // }


  @override
  Widget build(BuildContext context) {
    final pentests = ref.watch(pentestProvider);
    final pentest = pentests.firstWhere(
          (t) => t.id == widget.taskId,
      orElse: () =>
          PentestTask(
            id: widget.taskId,
            type: "Unknown Task",
            status: "pending",
            progressMessage: "Initializing security analysis...",
          ),
    );

    final statusColor = getStatusColor(pentest.status);
    final progressValue = _getProgressValue(pentest.status);
    final isRunning = pentest.status.toLowerCase() == 'running' ||
        pentest.status.toLowerCase() == 'processing';

    return Scaffold(
      backgroundColor: kDarkBg,
      body: CustomScrollView(
        slivers: [
          // Custom App Bar with gradient
          SliverAppBar(
            expandedHeight: 120,
            floating: false,
            pinned: true,
            backgroundColor: kDarkBg,
            elevation: 0,
            leading: IconButton(
              icon: const Icon(
                  Icons.arrow_back_ios_new_rounded, color: kTextPrimary),
              onPressed: () => Navigator.pop(context),
            ),
            flexibleSpace: FlexibleSpaceBar(
              title: Text(
                'Security Analysis',
                style: TextStyle(
                  color: kTextPrimary,
                  fontWeight: FontWeight.w600,
                  fontSize: 18,
                ),
              ),
              background: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      kPrimaryBlue.withValues(alpha: 0.1),
                      kPrimaryPurple.withValues(alpha: 0.1),
                    ],
                  ),
                ),
              ),
            ),
          ),

          SliverToBoxAdapter(
            child: Padding(
              padding: const EdgeInsets.all(20.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Main Status Card with Glassmorphic Effect
                  buildMainStatusCard(
                      _pulseController, pentest, statusColor, progressValue,
                      isRunning),

                  const SizedBox(height: 24),

                  // Metrics Row
                  _buildMetricsRow(pentest),

                  const SizedBox(height: 24),

                  // Live Output Section
                  buildOutputSection(pentest, context),

                  const SizedBox(height: 24),

                  // Action Button
                  if (pentest.status.toLowerCase() == 'completed')
                    // ElevatedButton.icon(
                    //   onPressed: () => downloadReport(),
                    //   icon: const Icon(Icons.download_rounded),
                    //   label: const Text('Download Report'),
                    // ),
                    buildActionButton(context),

                  const SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }


  Widget _buildMetricsRow(PentestTask pentest) {
    // Format duration
    String formatDuration(double? seconds) {
      if (seconds == null) return "—";
      final mins = (seconds / 60).floor();
      final secs = (seconds % 60).floor();
      return "${mins}m ${secs}s";
    }

    return Row(
      children: [
        Expanded(
          child: buildMetricCard(
            'Scan Time',
            formatDuration(pentest.duration),
            Icons.timer_outlined,
            kCyan,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: buildMetricCard(
            'Threats Found',
            pentest.threatsFound?.toString() ?? "—",
            Icons.bug_report_outlined,
            (pentest.threatsFound ?? 0) > 0 ? kErrorRed : kCyan,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: buildMetricCard(
            'Risk Level',
            pentest.riskLevel?.toUpperCase() ?? "UNKNOWN",
            Icons.shield_outlined,
            switch (pentest.riskLevel?.toUpperCase()) {
              "HIGH" => kErrorRed,
              "MEDIUM" => kWarningYellow,
              "LOW" => kCyan,
              _ => kPrimaryBlue,
            },
          ),
        ),
      ],
    );
  }
}