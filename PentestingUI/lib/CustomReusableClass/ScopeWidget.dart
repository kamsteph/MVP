import 'package:flutter/material.dart';

import '../DTO/ToolChoice.dart';
import 'package:file_picker/file_picker.dart';
import 'package:google_fonts/google_fonts.dart';

class ScopeCardWidget extends StatefulWidget {
  final ScopeConfig card;
  final int index;
  final VoidCallback onRemove;
  final Function(String category, String area) onRemoveArea;
  final Function(BuildContext context, ScopeConfig card) onAddArea;

  const ScopeCardWidget({
    super.key,
    required this.card,
    required this.index,
    required this.onRemove,
    required this.onRemoveArea,
    required this.onAddArea,
  });

  @override
  State<ScopeCardWidget> createState() => _ScopeCardWidgetState();
}

class _ScopeCardWidgetState extends State<ScopeCardWidget> {
  Widget _buildSectionTitle(String title, IconData icon) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.blue.shade50,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, size: 20, color: Colors.blue.shade700),
        ),
        const SizedBox(width: 10),
        Text(
          title,
          style: GoogleFonts.poppins(
            fontSize: 18,
            fontWeight: FontWeight.w700,
            color: Colors.grey.shade900,
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final card = widget.card;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 12),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.white, Colors.grey.shade50],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.shade300,
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header Row
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(10),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [Colors.blue.shade400, Colors.blue.shade600],
                        ),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        "#${widget.index + 1}",
                        style: GoogleFonts.poppins(
                          fontWeight: FontWeight.w700,
                          fontSize: 16,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Text(
                      "Scope Card ${widget.index + 1}",
                      style: GoogleFonts.poppins(
                        fontWeight: FontWeight.w700,
                        fontSize: 20,
                        color: Colors.grey.shade900,
                      ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: IconButton(
                        icon: Icon(Icons.settings, color: Colors.blue.shade700),
                        onPressed: _openAdvancedSettings,
                        tooltip: "Advanced Settings",
                      ),
                    ),
                    const SizedBox(width: 8),
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.red.shade50,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: IconButton(
                        icon: Icon(Icons.delete_outline, color: Colors.red.shade700),
                        onPressed: widget.onRemove,
                        tooltip: "Remove Card",
                      ),
                    ),
                  ],
                ),
              ],
            ),

            const SizedBox(height: 24),

            // Section Title
            _buildSectionTitle("Scope Definition", Icons.my_location),
            const SizedBox(height: 12),

            // Scope Selector
            stylishSegmentedScope(
              selected: card.scope,
              onChanged: (newScope) {
                setState(() => card.scope = newScope);
              },
            ),
            const SizedBox(height: 24),

            // Parameters Section
            _buildSectionTitle("Target Parameters", Icons.radar),
            const SizedBox(height: 12),

            // IP Input
            Column(
              children: [
                for (int i = 0; i < card.ipControllers.length; i++)
                  Padding(
                    padding: const EdgeInsets.symmetric(vertical: 6),
                    child: Row(
                      children: [
                        Expanded(
                          child: Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey.shade200,
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: TextFormField(
                              controller: card.ipControllers[i],
                              decoration: InputDecoration(
                                labelText: "Target IP / Range #${i + 1}",
                                hintText: "e.g., 192.168.1.0/24 or 2001:db8::/32",
                                prefixIcon: Icon(Icons.device_hub, color: Colors.blue.shade600),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide.none,
                                ),
                                filled: true,
                                fillColor: Colors.white,
                                labelStyle: GoogleFonts.poppins(fontSize: 14),
                                hintStyle: GoogleFonts.poppins(
                                  fontSize: 12,
                                  color: Colors.grey.shade400,
                                ),
                              ),
                              validator: (value) {
                                if (value == null || value.trim().isEmpty) {
                                  return null;
                                }

                                final input = value.trim();
                                final ipv4Pattern = RegExp(r'^(\d{1,3}\.){3}\d{1,3}(/\d{1,2})?$');
                                final ipv6Pattern = RegExp(r'^([0-9a-fA-F:]+)(/\d{1,3})?$');
                                final rangePattern = RegExp(r'^(.+)-(.+)$');

                                if (ipv4Pattern.hasMatch(input) ||
                                    ipv6Pattern.hasMatch(input) ||
                                    rangePattern.hasMatch(input) && widget.card.isSubnetMask) {
                                  return null;
                                }

                                return "Enter a valid IP, CIDR (/x), or range (start-end)";
                              },
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        if (i >= 1)
                          Container(
                            decoration: BoxDecoration(
                              color: Colors.red.shade50,
                              borderRadius: BorderRadius.circular(10),
                            ),
                            child: IconButton(
                              icon: Icon(Icons.remove_circle, color: Colors.red.shade600),
                              onPressed: () {
                                setState(() {
                                  if (card.ipControllers.length > 1) {
                                    card.ipControllers.removeAt(i);
                                  }
                                });
                              },
                            ),
                          ),
                      ],
                    ),
                  ),

                const SizedBox(height: 12),
                // Add button
                Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.green.shade400, Colors.green.shade600],
                    ),
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.green.shade200,
                        blurRadius: 8,
                        offset: const Offset(0, 3),
                      ),
                    ],
                  ),
                  child: ElevatedButton.icon(
                    onPressed: () {
                      setState(() {
                        card.ipControllers.add(TextEditingController());
                      });
                    },
                    label: Text(
                      "Add Another Target",
                      style: GoogleFonts.poppins(
                        fontSize: 15,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    icon: const Icon(Icons.add_circle, size: 20),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.transparent,
                      foregroundColor: Colors.white,
                      shadowColor: Colors.transparent,
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 14),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),

            // Grey & White: Insider Files
            if (card.scope == "grey" || card.scope == "white") ...[
              _buildSectionTitle("Insider Files", Icons.folder_special),
              const SizedBox(height: 12),
              _buildUploadSection(
                title: "Upload Insider Files",
                count: card.insiderFiles.length,
                icon: Icons.upload_file,
                color: Colors.purple,
                onTap: () async {
                  final result = await FilePicker.platform.pickFiles(allowMultiple: true);
                  if (result != null) {
                    setState(() => card.insiderFiles.addAll(result.files));
                  }
                },
                files: card.insiderFiles,
                hint: "VPN configs (.ovpn), employee credentials (.txt), insider docs (.pdf)",
              ),
              const SizedBox(height: 16),
            ],

            // White Only: Codebase Files
            if (card.scope == "white") ...[
              _buildSectionTitle("Codebase Files", Icons.code),
              const SizedBox(height: 12),
              _buildUploadSection(
                title: "Upload Codebase Files",
                count: card.codebaseFiles.length,
                icon: Icons.file_copy,
                color: Colors.orange,
                onTap: () async {
                  final result = await FilePicker.platform.pickFiles(allowMultiple: true);
                  if (result != null) {
                    setState(() => card.codebaseFiles.addAll(result.files));
                  }
                },
                files: card.codebaseFiles,
                hint: "Source code (.zip, .tar.gz), repositories (.git), configs (.yml)",
              ),
              const SizedBox(height: 16),
            ],

            const SizedBox(height: 8),

            // Attack Surface Section
            _buildSectionTitle("Attack Surface", Icons.security),
            const SizedBox(height: 16),

            // Toggle Full vs Custom
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: card.isFullPentest ? Colors.blue.shade50 : Colors.grey.shade100,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: card.isFullPentest ? Colors.blue.shade300 : Colors.grey.shade300,
                  width: 2,
                ),
              ),
              child: Row(
                children: [
                  Container(
                    decoration: BoxDecoration(
                      color: card.isFullPentest ? Colors.blue.shade600 : Colors.grey.shade400,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Switch(
                      value: card.isFullPentest,
                      activeColor: Colors.white,
                      activeTrackColor: Colors.blue.shade600,
                      inactiveThumbColor: Colors.white,
                      inactiveTrackColor: Colors.grey.shade400,
                      onChanged: (val) {
                        setState(() {
                          card.isFullPentest = val;
                          if (val) {
                            card.backupAreas = Map.from(card.selectedAreas);
                            card.selectedAreas.clear();
                          } else {
                            card.selectedAreas = Map.from(card.backupAreas);
                          }
                        });
                      },
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "Full Pentest Mode",
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        Text(
                          card.isFullPentest
                              ? "All areas will be tested"
                              : "Select specific areas to test",
                          style: GoogleFonts.poppins(
                            fontSize: 12,
                            color: Colors.grey.shade600,
                          ),
                        ),
                      ],
                    ),
                  ),
                  if (card.isFullPentest)
                    Icon(Icons.check_circle, color: Colors.blue.shade600, size: 28),
                ],
              ),
            ),
            const SizedBox(height: 16),

            if (!card.isFullPentest)
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Selected Areas",
                          style: GoogleFonts.poppins(
                            fontWeight: FontWeight.w600,
                            fontSize: 15,
                          ),
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          decoration: BoxDecoration(
                            color: Colors.blue.shade50,
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Text(
                            "${card.selectedAreas.values.fold<int>(0, (sum, areas) => sum + areas.length)} areas",
                            style: GoogleFonts.poppins(
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                              color: Colors.blue.shade700,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    if (card.selectedAreas.isEmpty)
                      Center(
                        child: Padding(
                          padding: const EdgeInsets.symmetric(vertical: 20),
                          child: Column(
                            children: [
                              Icon(Icons.touch_app, size: 48, color: Colors.grey.shade400),
                              const SizedBox(height: 8),
                              Text(
                                "No areas selected yet",
                                style: GoogleFonts.poppins(
                                  color: Colors.grey.shade600,
                                  fontSize: 14,
                                ),
                              ),
                            ],
                          ),
                        ),
                      )
                    else
                      ...card.selectedAreas.entries.map((entry) {
                        final category = entry.key;
                        final areas = entry.value;
                        return Padding(
                          padding: const EdgeInsets.only(bottom: 8),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                category,
                                style: GoogleFonts.poppins(
                                  fontSize: 13,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.grey.shade700,
                                ),
                              ),
                              const SizedBox(height: 6),
                              Wrap(
                                spacing: 8,
                                runSpacing: 8,
                                children: [
                                  for (var area in areas)
                                    Container(
                                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                      decoration: BoxDecoration(
                                        gradient: LinearGradient(
                                          colors: [Colors.green.shade400, Colors.green.shade600],
                                        ),
                                        borderRadius: BorderRadius.circular(20),
                                        boxShadow: [
                                          BoxShadow(
                                            color: Colors.green.shade200,
                                            blurRadius: 4,
                                            offset: const Offset(0, 2),
                                          ),
                                        ],
                                      ),
                                      child: Row(
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          Text(
                                            area,
                                            style: GoogleFonts.poppins(
                                              fontSize: 13,
                                              fontWeight: FontWeight.w500,
                                              color: Colors.white,
                                            ),
                                          ),
                                          const SizedBox(width: 6),
                                          GestureDetector(
                                            onTap: () => widget.onRemoveArea(category, area),
                                            child: Container(
                                              padding: const EdgeInsets.all(2),
                                              decoration: BoxDecoration(
                                                color: Colors.white.withOpacity(0.3),
                                                shape: BoxShape.circle,
                                              ),
                                              child: const Icon(
                                                Icons.close,
                                                size: 14,
                                                color: Colors.white,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                ],
                              ),
                            ],
                          ),
                        );
                      }),
                    const SizedBox(height: 12),
                    Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [Colors.blue.shade400, Colors.blue.shade600],
                        ),
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.blue.shade200,
                            blurRadius: 8,
                            offset: const Offset(0, 3),
                          ),
                        ],
                      ),
                      child: ElevatedButton.icon(
                        icon: const Icon(Icons.add_circle, size: 20),
                        label: Text(
                          "Add Surface Area",
                          style: GoogleFonts.poppins(
                            fontSize: 15,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        onPressed: () => widget.onAddArea(context, widget.card),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          foregroundColor: Colors.white,
                          shadowColor: Colors.transparent,
                          padding: const EdgeInsets.symmetric(vertical: 14),
                          minimumSize: const Size(double.infinity, 50),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildUploadSection({
    required String title,
    required int count,
    required IconData icon,
    required Color color,
    required VoidCallback onTap,
    required List files,
    required String hint,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          InkWell(
            onTap: onTap,
            borderRadius: BorderRadius.circular(12),
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.lightBlue.shade400, Colors.lightBlue.shade600],
                ),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.lightBlue.shade200,
                    blurRadius: 8,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(icon, color: Colors.white, size: 24),
                  const SizedBox(width: 12),
                  Text(
                    title,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                    ),
                  ),
                  if (count > 0) ...[
                    const SizedBox(width: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        "$count",
                        style: GoogleFonts.poppins(
                          fontSize: 13,
                          fontWeight: FontWeight.w700,
                          color: Colors.lightBlue.shade700,
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),
          if (files.isNotEmpty) ...[
            const SizedBox(height: 12),
            ...files.map((f) => Container(
              margin: const EdgeInsets.only(bottom: 8),
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade200),
              ),
              child: Row(
                children: [
                  Icon(Icons.insert_drive_file, color: Colors.lightBlue.shade600, size: 20),
                  const SizedBox(width: 10),
                  Expanded(
                    child: Text(
                      f.name,
                      style: GoogleFonts.poppins(
                        fontSize: 13,
                        fontWeight: FontWeight.w500,
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            )),
          ],
          const SizedBox(height: 8),
          Text(
            hint,
            style: GoogleFonts.poppins(
              fontSize: 12,
              color: Colors.grey.shade600,
              height: 1.4,
            ),
          ),
        ],
      ),
    );
  }

  void _openAdvancedSettings() {
    showDialog(
      context: context,
      builder: (ctx) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Dialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
              elevation: 16,
              child: Container(
                constraints: const BoxConstraints(maxWidth: 600),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.white, Colors.grey.shade50],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(24),
                  child: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Row(
                          children: [
                            Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [Colors.blue.shade400, Colors.blue.shade600],
                                ),
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: const Icon(Icons.tune, color: Colors.white, size: 24),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Text(
                                "Advanced Configuration",
                                style: GoogleFonts.poppins(
                                  fontWeight: FontWeight.w700,
                                  fontSize: 20,
                                ),
                              ),
                            ),
                            IconButton(
                              icon: const Icon(Icons.close),
                              onPressed: () => Navigator.pop(context),
                            ),
                          ],
                        ),
                        const SizedBox(height: 24),

                        // Toggle advanced mode
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: widget.card.isAdvanced ? Colors.blue.shade50 : Colors.white,
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: widget.card.isAdvanced ? Colors.blue.shade300 : Colors.grey.shade300,
                              width: 2,
                            ),
                          ),
                          child: Row(
                            children: [
                              Switch(
                                value: widget.card.isAdvanced,
                                activeColor: Colors.blue.shade600,
                                onChanged: (val) => setState(() => widget.card.isAdvanced = val),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      "Enable Advanced Mode",
                                      style: GoogleFonts.poppins(
                                        fontWeight: FontWeight.w600,
                                        fontSize: 15,
                                      ),
                                    ),
                                    Text(
                                      "Access detailed scan configurations",
                                      style: GoogleFonts.poppins(
                                        fontSize: 12,
                                        color: Colors.grey.shade600,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),

                        if (widget.card.isAdvanced) ...[
                          const SizedBox(height: 20),

                          // Subnet Mask
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.shade300),
                            ),
                            child: CheckboxListTile(
                              title: Text("Enable Subnet Mask", style: GoogleFonts.poppins(fontWeight: FontWeight.w600)),
                              subtitle: Text("Allow CIDR notation for IP ranges", style: GoogleFonts.poppins(fontSize: 12)),
                              value: widget.card.isSubnetMask,
                              activeColor: Colors.blue.shade600,
                              contentPadding: EdgeInsets.zero,
                              onChanged: (val) => setState(() {
                                widget.card.isSubnetMask = val!;
                              }),
                            ),
                          ),

                          const SizedBox(height: 16),
                          const Divider(),
                          const SizedBox(height: 16),

                          // Port selection
                          Text(
                            "Port Selection",
                            style: GoogleFonts.poppins(
                              fontWeight: FontWeight.w700,
                              fontSize: 16,
                            ),
                          ),
                          const SizedBox(height: 12),
                          Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.shade300),
                            ),
                            child: DropdownButtonFormField<String>(
                              value: widget.card.portMode,
                              decoration: InputDecoration(
                                prefixIcon: Icon(Icons.settings_ethernet, color: Colors.blue.shade600),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide.none,
                                ),
                                filled: true,
                                fillColor: Colors.white,
                                contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                              ),
                              items: [
                                DropdownMenuItem(
                                  value: "top10",
                                  child: Text("Top 10 Ports", style: GoogleFonts.poppins()),
                                ),
                                DropdownMenuItem(
                                  value: "all",
                                  child: Text("All Ports (1-65535)", style: GoogleFonts.poppins()),
                                ),
                                DropdownMenuItem(
                                  value: "custom",
                                  child: Text("Custom Ports", style: GoogleFonts.poppins()),
                                ),
                              ],
                              onChanged: (val) => setState(() => widget.card.portMode = val!),
                            ),
                          ),
                          if (widget.card.portMode == "custom") ...[
                            const SizedBox(height: 12),
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(12),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.grey.shade200,
                                    blurRadius: 4,
                                    offset: const Offset(0, 2),
                                  ),
                                ],
                              ),
                              child: TextFormField(
                                controller: widget.card.customPortsController,
                                decoration: InputDecoration(
                                  labelText: "Custom Ports",
                                  hintText: "e.g., 80,443,8080-8090",
                                  prefixIcon: Icon(Icons.numbers, color: Colors.blue.shade600),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(12),
                                    borderSide: BorderSide.none,
                                  ),
                                  filled: true,
                                  fillColor: Colors.white,
                                  labelStyle: GoogleFonts.poppins(fontSize: 14),
                                  hintStyle: GoogleFonts.poppins(fontSize: 12, color: Colors.grey.shade400),
                                ),
                              ),
                            ),
                          ],
                          const SizedBox(height: 16),
                          const Divider(),
                          const SizedBox(height: 16),

                          // Packet type
                          Text(
                            "Packet Type",
                            style: GoogleFonts.poppins(
                              fontWeight: FontWeight.w700,
                              fontSize: 16,
                            ),
                          ),
                          const SizedBox(height: 12),
                          Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.shade300),
                            ),
                            child: DropdownButtonFormField<String>(
                              value: widget.card.packetType,
                              decoration: InputDecoration(
                                prefixIcon: Icon(Icons.network_check, color: Colors.blue.shade600),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide.none,
                                ),
                                filled: true,
                                fillColor: Colors.white,
                                contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                              ),
                              items: [
                                DropdownMenuItem(
                                  value: "TCP",
                                  child: Row(
                                    children: [
                                      Container(
                                        padding: const EdgeInsets.all(6),
                                        decoration: BoxDecoration(
                                          color: Colors.blue.shade50,
                                          borderRadius: BorderRadius.circular(6),
                                        ),
                                        child: Text("TCP", style: GoogleFonts.poppins(fontSize: 12, fontWeight: FontWeight.w600)),
                                      ),
                                      const SizedBox(width: 8),
                                      Text("Transmission Control Protocol", style: GoogleFonts.poppins(fontSize: 13)),
                                    ],
                                  ),
                                ),
                                DropdownMenuItem(
                                  value: "UDP",
                                  child: Row(
                                    children: [
                                      Container(
                                        padding: const EdgeInsets.all(6),
                                        decoration: BoxDecoration(
                                          color: Colors.orange.shade50,
                                          borderRadius: BorderRadius.circular(6),
                                        ),
                                        child: Text("UDP", style: GoogleFonts.poppins(fontSize: 12, fontWeight: FontWeight.w600)),
                                      ),
                                      const SizedBox(width: 8),
                                      Text("User Datagram Protocol", style: GoogleFonts.poppins(fontSize: 13)),
                                    ],
                                  ),
                                ),
                                DropdownMenuItem(
                                  value: "Both",
                                  child: Row(
                                    children: [
                                      Container(
                                        padding: const EdgeInsets.all(6),
                                        decoration: BoxDecoration(
                                          color: Colors.green.shade50,
                                          borderRadius: BorderRadius.circular(6),
                                        ),
                                        child: Text("BOTH", style: GoogleFonts.poppins(fontSize: 12, fontWeight: FontWeight.w600)),
                                      ),
                                      const SizedBox(width: 8),
                                      Text("TCP & UDP", style: GoogleFonts.poppins(fontSize: 13)),
                                    ],
                                  ),
                                ),
                              ],
                              onChanged: (val) => setState(() => widget.card.packetType = val!),
                            ),
                          ),
                        ],

                        const SizedBox(height: 24),

                        // Close button
                        Container(
                          width: double.infinity,
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [Colors.blue.shade400, Colors.blue.shade600],
                            ),
                            borderRadius: BorderRadius.circular(12),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.blue.shade200,
                                blurRadius: 8,
                                offset: const Offset(0, 3),
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: () => Navigator.pop(context),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              foregroundColor: Colors.white,
                              shadowColor: Colors.transparent,
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            child: Text(
                              "Save Settings",
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }
}

Widget stylishSegmentedScope({
  required String selected,
  required Function(String) onChanged,
}) {
  final scopes = [
    {"value": "black", "label": "Black Box", "color": Colors.grey.shade900, "icon": Icons.visibility_off},
    {"value": "grey", "label": "Grey Box", "color": Colors.grey.shade600, "icon": Icons.remove_red_eye},
    {"value": "white", "label": "White Box", "color": Colors.blue.shade600, "icon": Icons.visibility},
  ];

  return Container(
    padding: const EdgeInsets.all(4),
    decoration: BoxDecoration(
      color: Colors.grey.shade200,
      borderRadius: BorderRadius.circular(14),
    ),
    child: Row(
      children: scopes.map((scope) {
        final isSelected = selected == scope["value"];
        return Expanded(
          child: GestureDetector(
            onTap: () => onChanged(scope["value"] as String),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              padding: const EdgeInsets.symmetric(vertical: 14),
              decoration: BoxDecoration(
                gradient: isSelected
                    ? LinearGradient(
                  colors: [
                    (scope["color"] as Color).withOpacity(0.8),
                    scope["color"] as Color,
                  ],
                )
                    : null,
                color: isSelected ? null : Colors.transparent,
                borderRadius: BorderRadius.circular(12),
                boxShadow: isSelected
                    ? [
                  BoxShadow(
                    color: (scope["color"] as Color).withOpacity(0.3),
                    blurRadius: 8,
                    offset: const Offset(0, 3),
                  ),
                ]
                    : null,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    scope["icon"] as IconData,
                    size: 20,
                    color: isSelected ? Colors.white : Colors.grey.shade600,
                  ),
                  const SizedBox(width: 6),
                  Text(
                    scope["label"] as String,
                    style: GoogleFonts.poppins(
                      fontSize: 13,
                      fontWeight: isSelected ? FontWeight.w700 : FontWeight.w500,
                      color: isSelected ? Colors.white : Colors.grey.shade600,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      }).toList(),
    ),
  );
}