import 'dart:convert';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../CustomReusableClass/PentestNotifier.dart';
import '../CustomReusableClass/PentestProgressPage.dart';
import '../CustomReusableClass/ScopeWidget.dart';
import '../DTO/AttackSurface.dart';
import '../DTO/PentestModel.dart';
import '../DTO/ToolChoice.dart';
import '../DTO/UserStorage.dart';
import '../KaliaPentestingApi/FileUploadApi.dart';
import '../PentestOptions/NetworkPentestAreas.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:path/path.dart' as path;

// Consistent color scheme
const Color kPrimaryBlue = Color(0xFF6366F1);
const Color kPrimaryPurple = Color(0xFF8B5CF6);
const Color kCyan = Color(0xFF06B6D4);
const Color kDarkBg = Color(0xFF0A0F1E);
const Color kCardBg = Color(0xFF0F172A);
const Color kCardBgLight = Color(0xFF1E293B);
const Color kBorderColor = Color(0xFF334155);
const Color kSuccessGreen = Color(0xFF10B981);
const Color kWarningYellow = Color(0xFFF59E0B);
const Color kErrorRed = Color(0xFFEF4444);
const Color kTextPrimary = Color(0xFFE2E8F0);
const Color kTextSecondary = Color(0xFF94A3B8);

class NetworkScanPage extends ConsumerStatefulWidget {
  final AttackSurface attackSurface;
  const NetworkScanPage({super.key, required this.attackSurface});

  @override
  ConsumerState<NetworkScanPage> createState() => _NetworkScanPageState();
}

class _NetworkScanPageState extends ConsumerState<NetworkScanPage>
    with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  late final List<ScopeConfig> _scopeCards = [];

  final TextEditingController _ipRangeController = TextEditingController();
  final TextEditingController _nameTarget = TextEditingController();
  final TextEditingController _descriptionTarget = TextEditingController();

  String _scanMode = "Scan Only";
  String _reportFormat = "json";
  final String _scope = "black";
  bool _isScanning = false;
  bool _isCrossDomainInsight = false;
  String _scanMessage = "";

  late AnimationController _pulseController;

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    )..repeat(reverse: true);
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _ipRangeController.dispose();
    _nameTarget.dispose();
    _descriptionTarget.dispose();
    super.dispose();
  }

  Widget _buildAddScopeButton() {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: _addScopeCard,
          borderRadius: BorderRadius.circular(16),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
            decoration: BoxDecoration(
              color: kCardBg,
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: kPrimaryBlue.withValues(alpha: 0.3),
                width: 2,
                style: BorderStyle.solid,
              ),
              boxShadow: [
                BoxShadow(
                  color: kPrimaryBlue.withValues(alpha: 0.1),
                  blurRadius: 12,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: kPrimaryBlue.withValues(alpha: 0.15),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Icon(Icons.add_rounded, color: kPrimaryBlue, size: 24),
                ),
                const SizedBox(width: 12),
                const Text(
                  'Add Scope Configuration',
                  style: TextStyle(
                    color: kTextPrimary,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    letterSpacing: 0.3,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _addScopeCard() => setState(() => _scopeCards.add(ScopeConfig()));
  void _removeScopeCard(int index) => setState(() => _scopeCards.removeAt(index));

  Future<void> _startScan() async {
    setState(() {
      _isScanning = true;
      _scanMessage = "";
    });

    try {
      if (!_formKey.currentState!.validate()) {
        setState(() => _isScanning = false);
        return;
      }

      if (_scopeCards.isEmpty) {
        _showCustomSnackBar("Please add at least one Scope Card.", isError: true);
        setState(() => _isScanning = false);
        return;
      }

      for (var i = 0; i < _scopeCards.length; i++) {
        final card = _scopeCards[i];

        print("This is the bool for full pentest: ${card.isFullPentest}");
        print("This is the bool for full pentest: ${card.selectedAreas}");

        if (!card.isFullPentest && card.selectedAreas.isEmpty) {
          _showCustomSnackBar(
            "Scope Card #${i + 1} must have at least one surface area or Full Pentest selected.",
            isError: true,
          );
          setState(() => _isScanning = false);
          return;
        }
      }

      final List<String> allTargets = [];
      if (_ipRangeController.text.trim().isNotEmpty) {
        allTargets.add(_ipRangeController.text.trim());
      }

      for (var card in _scopeCards) {
        for (var c in card.ipControllers) {
          final ip = c.text.trim();
          if (ip.isNotEmpty) allTargets.add(ip);
        }
      }

      if (allTargets.isEmpty) {
        _showCustomSnackBar("Please enter at least one valid target IP.", isError: true);
        setState(() => _isScanning = false);
        return;
      }

      await UserDataStorage.save("recent_ips", _ipRangeController.text.trim());
      await UserDataStorage.save("recent_targets", _nameTarget.text.trim());

      List<File> codebaseFiles = [];
      List<File> insiderFiles = [];
      for (var card in _scopeCards) {
        codebaseFiles.addAll(card.codebaseFiles.map((pf) => File(pf.path!)));
        insiderFiles.addAll(card.insiderFiles.map((pf) => File(pf.path!)));
      }
      List<File> allFiles = [...codebaseFiles, ...insiderFiles];

      var uploaded = await uploadFiles(allFiles);
      final idByFilename = {for (var e in uploaded) e['original_filename']: e['id']};

      final List<Map<String, dynamic>> scopesPayload = _scopeCards.map((s) {
        List<int>? parsedCustomPorts;
        if ((s.portMode) == "custom") {
          final text = s.customPortsController.text;
          parsedCustomPorts = text
              .split(",")
              .map((p) => int.tryParse(p.trim()))
              .whereType<int>()
              .toList();
          if (parsedCustomPorts.isEmpty) parsedCustomPorts = null;
        }

        final List<Map<String, String>> selectedAreasList = [];
        s.selectedAreas.forEach((category, areas) {
          for (var area in areas) {
            selectedAreasList.add({"category": category, "area": area});
          }
        });

        return {
          "scope": s.scope,
          "target": s.ipControllers.map((c) => c.text.trim()).where((ip) => ip.isNotEmpty).toList(),
          "selected_areas": selectedAreasList,
          "insider_file_ids": s.insiderFiles.map((pf) => idByFilename[path.basename(pf.path!)]).toList(),
          "codebase_file_ids": s.codebaseFiles.map((pf) => idByFilename[path.basename(pf.path!)]).toList(),
          "vuln_tools": s.vulnTools,
          "exploit_tool": s.exploitTool,
          "is_advanced": s.isAdvanced,
          "subnet_mask": s.isSubnetMask,
          "port_mode": s.portMode,
          "custom_ports": parsedCustomPorts,
          "packet_type": s.packetType,
        };
      }).toList();

      List<Map<String, String>> attackSurfacePayload = [];
      final List<String> allNetworkSurfaceNames = [
        "Open ports",
        "Network services (SMB, FTP, DNS, SNMP)",
        "Firewalls, IDS/IPS",
        "Routers/switches",
        "Wireless networks",
        "VPN gateways",
        "Load balancers",
        "Email servers",
        "Web servers & proxies",
        "Databases",
      ];

      final bool anyFull = _scopeCards.any((c) => c.isFullPentest);
      if (anyFull) {
        attackSurfacePayload = allNetworkSurfaceNames.map((n) => {"surface": n}).toList();
      } else {
        final Set<String> selected = <String>{};
        for (var card in _scopeCards) {
          card.selectedAreas.forEach((category, areas) {
            //if (category.trim().isNotEmpty) selected.add(category);
            for (var area in areas) {
              selected.add(area);
            }
          });
        }
        attackSurfacePayload = selected.map((s) => {"surface": s}).toList();
        if (attackSurfacePayload.isEmpty) {
          attackSurfacePayload = [{"surface": "Open ports"}];
        }
      }

      if (kDebugMode) {
        print(">> Collected targets: $allTargets");
        print(">> AttackSurface payload: $attackSurfacePayload");
        print(">> Scopes payload: $scopesPayload");
      }

      final result = await postScanMultipart(
        region: "network",
        scanType: _scanMode,
        scope: _scope,
        target: allTargets,
        reportFormat: _reportFormat,
        crossDomainInsight: _isCrossDomainInsight,
        name: _nameTarget.text.trim(),
        description: _descriptionTarget.text.trim(),
        tools: {
          "vuln_tools": ["Naabu", "Nmap"],
          "exploit_tool": "Default",
          "scopes": scopesPayload,
        },
        codebaseFiles: codebaseFiles,
        insiderFiles: insiderFiles,
        attackSurface: attackSurfacePayload,
      );

      if (kDebugMode) {
        print("results of the launching:  $result");
      }

      setState(() {
        _scanMessage = "\nResult:\n${const JsonEncoder.withIndent("  ").convert(result)}\n";
      });

      if (result["task_id"] != null) {
        final newTask = PentestTask(
          id: result["task_id"],
          type: result["region"] ?? "network",
          status: "running",
          progressMessage: "Scan started",
        );
        ref.read(pentestProvider.notifier).addPentest(newTask);

        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => PentestProgressPage(taskId: newTask.id),
          ),
        );
      }
    } catch (e, st) {
      setState(() => _scanMessage = "\nError scanning: $e\n");
      _showCustomSnackBar("Scan failed: $e", isError: true);
      if (kDebugMode) {
        print("Scan error: $e\n$st");
      }
    } finally {
      setState(() => _isScanning = false);
    }
  }

  void _showCustomSnackBar(String message, {bool isError = false}) {
    final overlay = Overlay.of(context);
    final overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        top: MediaQuery.of(context).padding.top + 20,
        left: 20,
        right: 20,
        child: Material(
          color: Colors.transparent,
          child: TweenAnimationBuilder(
            tween: Tween<double>(begin: 0, end: 1),
            duration: const Duration(milliseconds: 300),
            builder: (context, double value, child) {
              return Transform.translate(
                offset: Offset(0, -50 * (1 - value)),
                child: Opacity(opacity: value, child: child),
              );
            },
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: isError
                      ? [kErrorRed, kErrorRed.withValues(alpha: 0.8)]
                      : [kSuccessGreen, kSuccessGreen.withValues(alpha: 0.8)],
                ),
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: (isError ? kErrorRed : kSuccessGreen).withValues(alpha: 0.3),
                    blurRadius: 15,
                    offset: const Offset(0, 5),
                  ),
                ],
              ),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withValues(alpha: 0.2),
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      isError ? Icons.error_rounded : Icons.check_rounded,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      message,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );

    overlay.insert(overlayEntry);
    Future.delayed(const Duration(seconds: 3), () => overlayEntry.remove());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: kDarkBg,
      body: CustomScrollView(
        slivers: [
          // Modern App Bar
          SliverAppBar(
            expandedHeight: 140,
            floating: false,
            pinned: true,
            backgroundColor: kDarkBg,
            elevation: 0,
            leading: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new_rounded, color: kTextPrimary),
              onPressed: () => Navigator.pop(context),
            ),
            flexibleSpace: FlexibleSpaceBar(
              title: const Text(
                'Network Pentest',
                style: TextStyle(
                  color: kTextPrimary,
                  fontWeight: FontWeight.w600,
                  fontSize: 20,
                ),
              ),
              background: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      kPrimaryBlue.withValues(alpha: 0.1),
                      kPrimaryPurple.withValues(alpha: 0.1),
                    ],
                  ),
                ),
                child: Align(
                  alignment: Alignment.bottomLeft,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 16, bottom: 60),
                    child: Row(
                      children: [
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: kCyan.withValues(alpha: 0.15),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Icon(Icons.security_rounded, color: kCyan, size: 20),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'Configure & Launch',
                          style: TextStyle(
                            color: kTextSecondary,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),

          SliverToBoxAdapter(
            child: Form(
              key: _formKey,
              child: Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Scope Cards Section
                    if (_scopeCards.isNotEmpty) ...[
                      _buildSectionHeader('Scope Configurations', Icons.layers_rounded),
                      const SizedBox(height: 16),
                      for (int i = 0; i < _scopeCards.length; i++)
                        Padding(
                          padding: const EdgeInsets.only(bottom: 16),
                          child: ScopeCardWidget(
                            card: _scopeCards[i],
                            index: i,
                            onRemove: () => _removeScopeCard(i),
                            onRemoveArea: (category, area) {
                              setState(() {
                                _scopeCards[i].selectedAreas[category]?.remove(area);
                                if (_scopeCards[i].selectedAreas[category]?.isEmpty ?? false) {
                                  _scopeCards[i].selectedAreas.remove(category);
                                }
                              });
                            },
                            onAddArea: (ctx, card) async {
                              await Navigator.push(
                                ctx,
                                MaterialPageRoute(
                                  builder: (_) => NetworkPentestAreasPage(scopeCard: card),
                                ),
                              );
                              setState(() {});
                            },
                          ),
                        ),
                    ],

                    _buildAddScopeButton(),

                    const SizedBox(height: 24),

                    // Configuration Section
                    _buildSectionHeader('Scan Configuration', Icons.settings_rounded),
                    const SizedBox(height: 16),

                    // Cross-Domain Insight
                    _buildFeatureCard(
                      title: 'Cross-Domain Insight',
                      subtitle: 'Includes analysis across related domains & subdomains for deeper visibility',
                      icon: Icons.language_rounded,
                      value: _isCrossDomainInsight,
                      onChanged: (val) => setState(() => _isCrossDomainInsight = val),
                    ),

                    const SizedBox(height: 16),

                    // Description
                    _buildStyledTextField(
                      controller: _descriptionTarget,
                      label: 'Description',
                      hint: 'Describe the purpose of this scan...',
                      icon: Icons.description_outlined,
                      minLines: 4,
                      maxLines: 6,
                    ),

                    const SizedBox(height: 16),

                    // Scan Mode and Export Format
                    Row(
                      children: [
                        Expanded(
                          child: _buildStyledDropdown(
                            value: _scanMode,
                            label: 'Scan Mode',
                            icon: Icons.radar_rounded,
                            items: const [
                              DropdownMenuItem(
                                value: "Scan Only",
                                child: Text("Vulnerability Scan Only"),
                              ),
                              DropdownMenuItem(
                                value: "Scan + Attack",
                                child: Text("Scan + Exploitation"),
                              ),
                            ],
                            onChanged: (val) => setState(() => _scanMode = val!),
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: _buildStyledDropdown(
                            value: _reportFormat,
                            label: 'Export Format',
                            icon: Icons.file_download_outlined,
                            items: ["json", "pdf", "md"]
                                .map((f) => DropdownMenuItem(value: f, child: Text(f.toUpperCase())))
                                .toList(),
                            onChanged: (val) => setState(() => _reportFormat = val!),
                          ),
                        ),
                      ],
                    ),

                    const SizedBox(height: 32),

                    // Start Scan Button
                    _buildScanButton(),

                    if (_scanMessage.isNotEmpty) ...[
                      const SizedBox(height: 24),
                      _buildResultCard(),
                    ],

                    const SizedBox(height: 40),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionHeader(String title, IconData icon) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: kPrimaryBlue.withValues(alpha: 0.15),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Icon(icon, color: kPrimaryBlue, size: 20),
        ),
        const SizedBox(width: 12),
        Text(
          title,
          style: const TextStyle(
            color: kTextPrimary,
            fontSize: 20,
            fontWeight: FontWeight.bold,
            letterSpacing: 0.3,
          ),
        ),
      ],
    );
  }

  Widget _buildFeatureCard({
    required String title,
    required String subtitle,
    required IconData icon,
    required bool value,
    required ValueChanged<bool> onChanged,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: kCardBg,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: value ? kCyan.withValues(alpha: 0.5) : kBorderColor.withValues(alpha: 0.3),
          width: 1.5,
        ),
      ),
      child: CheckboxListTile(
        value: value,
        onChanged: (val) => onChanged(val!),
        activeColor: kCyan,
        checkColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        secondary: Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: kCyan.withValues(alpha: 0.15),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Icon(icon, color: kCyan, size: 24),
        ),
        title: Text(
          title,
          style: const TextStyle(
            color: kTextPrimary,
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 4),
          child: Text(
            subtitle,
            style: TextStyle(
              color: kTextSecondary,
              fontSize: 13,
              height: 1.4,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildStyledTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    int minLines = 1,
    int maxLines = 1,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: kCardBg,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: kBorderColor.withValues(alpha: 0.3)),
      ),
      child: TextField(
        controller: controller,
        minLines: minLines,
        maxLines: maxLines,
        style: const TextStyle(color: kTextPrimary, fontSize: 14),
        decoration: InputDecoration(
          labelText: label,
          hintText: hint,
          labelStyle: TextStyle(color: kTextSecondary, fontSize: 14),
          hintStyle: TextStyle(color: kTextSecondary.withValues(alpha: 0.5), fontSize: 13),
          prefixIcon: Icon(icon, color: kCyan, size: 22),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.all(16),
        ),
      ),
    );
  }

  Widget _buildStyledDropdown({
    required String value,
    required String label,
    required IconData icon,
    required List<DropdownMenuItem<String>> items,
    required ValueChanged<String?> onChanged,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: kCardBg,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: kBorderColor.withValues(alpha: 0.3)),
      ),
      child: DropdownButtonFormField<String>(
        initialValue: value,
        items: items,
        onChanged: onChanged,
        dropdownColor: kCardBgLight,
        style: const TextStyle(color: kTextPrimary, fontSize: 14),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: kTextSecondary, fontSize: 14),
          prefixIcon: Icon(icon, color: kCyan, size: 22),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        ),
        icon: Icon(Icons.keyboard_arrow_down_rounded, color: kTextSecondary),
      ),
    );
  }

  Widget _buildScanButton() {
    return AnimatedBuilder(
      animation: _pulseController,
      builder: (context, child) {
        return Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: _isScanning ? null : _startScan,
            borderRadius: BorderRadius.circular(16),
            child: Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 18),
              decoration: BoxDecoration(
                gradient: _isScanning
                    ? LinearGradient(
                  colors: [kTextSecondary, kTextSecondary.withValues(alpha: 0.7)],
                )
                    : LinearGradient(
                  colors: [kPrimaryBlue, kPrimaryPurple],
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                ),
                borderRadius: BorderRadius.circular(16),
                boxShadow: _isScanning
                    ? []
                    : [
                  BoxShadow(
                    color: kPrimaryBlue.withValues(alpha: 0.3 + (0.1 * _pulseController.value)),
                    blurRadius: 20,
                    offset: const Offset(0, 8),
                  ),
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  if (_isScanning)
                    const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  else
                    const Icon(Icons.rocket_launch_rounded, color: Colors.white, size: 22),
                  const SizedBox(width: 12),
                  Text(
                    _isScanning ? 'LAUNCHING SCAN...' : 'START SCAN',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 1,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildResultCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: kCardBg,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: kCyan.withValues(alpha: 0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.data_object_rounded, color: kCyan, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Scan Result',
                style: TextStyle(
                  color: kTextPrimary,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.black,
              borderRadius: BorderRadius.circular(12),
            ),
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Text(
                _scanMessage,
                style: TextStyle(
                  color: kCyan.withValues(alpha: 0.9),
                  fontSize: 12,
                  fontFamily: 'monospace',
                  height: 1.5,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}