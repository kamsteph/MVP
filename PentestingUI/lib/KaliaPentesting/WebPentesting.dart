import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../KaliaPentestingApi/KaliaWebPentestingApi.dart';

class WebScanPage extends StatefulWidget {
  final dynamic attackSurface;

  const WebScanPage({super.key, required this.attackSurface});

  @override
  State<WebScanPage> createState() => _WebScanPageState();
}

class _WebScanPageState extends State<WebScanPage> {
  final _formKey = GlobalKey<FormState>();

  // Controllers
  final TextEditingController _mainUrlController = TextEditingController();
  final TextEditingController _userAccountController = TextEditingController();
  final TextEditingController _subdomainsController = TextEditingController();
  final TextEditingController _apiEndpointsController = TextEditingController();
  final TextEditingController _sourceCodeController = TextEditingController();
  final TextEditingController _adminCredsController = TextEditingController();
  final TextEditingController _swaggerFileController = TextEditingController();

  String _scope = "black";
  String _scanResult = "";
  String _scanStatusText = "";
  bool _isLoading = false;
  String _scanMode = "Scan Only";

  final Map<String, String> scopeDescriptions = {
    "black": "Black Scope: Only the target URL is required.",
    "grey": "Grey Scope: Requires the main URL + optional insider details.",
    "white": "White Scope: Full insider access for deep testing.",
  };

  // --- Start scan ---
  Future<void> _startScan() async {
    if (!_formKey.currentState!.validate()) return;

    final payload = {
      "region": "web",
      "scope": _scope,
      "attack_surface": widget.attackSurface,
      "scan_type": _scanMode,
      "target": [_mainUrlController.text.trim()],
      if (_scope != "black" && _userAccountController.text.isNotEmpty)
        "user_account": _userAccountController.text.trim(),
      if (_scope != "black" && _subdomainsController.text.isNotEmpty)
        "subdomains": _subdomainsController.text.trim().split(","),
      if (_scope != "black" && _apiEndpointsController.text.isNotEmpty)
        "api_endpoints": _apiEndpointsController.text.trim().split(","),
      if (_scope == "white" && _sourceCodeController.text.isNotEmpty)
        "source_code_repo": _sourceCodeController.text.trim(),
      if (_scope == "white" && _adminCredsController.text.isNotEmpty)
        "admin_credentials": _adminCredsController.text.trim(),
      if (_scope == "white" && _swaggerFileController.text.isNotEmpty)
        "swagger_file": _swaggerFileController.text.trim(),
    };

    setState(() {
      _isLoading = true;
      _scanStatusText = " Launching scan...";
      _scanResult = "";
    });

    try {
      final response = await CombinedPentestAPI.postScan(payload);
      setState(() {
        _scanResult = const JsonEncoder.withIndent("  ").convert(response);
        _scanStatusText = " Scan completed.";
      });
    } catch (e) {
      setState(() {
        _scanResult = " Scan failed: $e";
        _scanStatusText = "";
      });
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // --- Input builder ---
  Widget _buildInputField({
    required TextEditingController controller,
    required String label,
    bool requiredField = false,
    int minLines = 1,
    int? maxLines,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        minLines: minLines,
        maxLines: maxLines,
        validator: requiredField
            ? (value) => (value == null || value.trim().isEmpty)
            ? "This field is required"
            : null
            : null,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          alignLabelWithHint: true,
        ),
      ),
    );
  }

  // --- Build scope-based card ---
  Widget _buildScopeCard() {
    List<Widget> fields = [];

    // Black scope: only main URL
    fields.add(_buildInputField(
      controller: _mainUrlController,
      label: "Main URL (mandatory)",
      requiredField: true,
    ));

    if (_scope == "grey" || _scope == "white") {
      fields.addAll([
        _buildInputField(
          controller: _userAccountController,
          label: "Non-privileged user (optional)",
        ),
        _buildInputField(
          controller: _subdomainsController,
          label: "Subdomains (comma-separated, optional)",
        ),
        _buildInputField(
          controller: _apiEndpointsController,
          label: "API Endpoints (comma-separated, optional)",
          minLines: 2,
          maxLines: null,
        ),
      ]);
    }

    if (_scope == "white") {
      fields.addAll([
        _buildInputField(
          controller: _sourceCodeController,
          label: "Source code repo link (optional)",
        ),
        _buildInputField(
          controller: _adminCredsController,
          label: "Admin credentials (optional)",
        ),
        _buildInputField(
          controller: _swaggerFileController,
          label: "Swagger/OpenAPI file URL (optional)",
          minLines: 2,
          maxLines: null,
        ),
      ]);
    }

    return Card(
      color: Colors.lightBlue,
      margin: const EdgeInsets.symmetric(vertical: 12),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(children: fields),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Web Pentest")),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // --- Scope selection ---
              DropdownButtonFormField<String>(
                initialValue: _scope,
                items: const [
                  DropdownMenuItem(value: "black", child: Text("Black Scope")),
                  DropdownMenuItem(value: "grey", child: Text("Grey Scope")),
                  DropdownMenuItem(value: "white", child: Text("White Scope")),
                ],
                onChanged: (val) => setState(() => _scope = val!),
                decoration: const InputDecoration(
                  labelText: "Select Scope",
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 8),
              Text(scopeDescriptions[_scope]!,
                  style: const TextStyle(fontSize: 13, color: Colors.grey)),

              // --- Scope-based inputs ---
              _buildScopeCard(),

              const SizedBox(height: 16),

              // --- Mode ---
              DropdownButtonFormField<String>(
                initialValue: _scanMode,
                items: const [
                  DropdownMenuItem(value: "Scan Only", child: Text("Scan Only")),
                  DropdownMenuItem(
                      value: "Scan + Attack", child: Text("Scan + Attack")),
                ],
                onChanged: (val) => setState(() => _scanMode = val!),
                decoration: const InputDecoration(
                  labelText: "Scan Mode",
                  border: OutlineInputBorder(),
                ),
              ),

              const SizedBox(height: 20),
              if (_isLoading) const CircularProgressIndicator(),
              if (!_isLoading)
                ElevatedButton(
                  onPressed: _startScan,
                  style: ElevatedButton.styleFrom(
                    minimumSize: const Size(200, 50),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                  child: const Text("Launch Pentest"),
                ),

              const SizedBox(height: 20),
              if (_scanStatusText.isNotEmpty)
                Text(_scanStatusText,
                    style: GoogleFonts.robotoMono(
                        fontSize: 14, color: Colors.blue)),
              if (_scanResult.isNotEmpty)
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.shade300),
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.grey.shade100,
                  ),
                  child: Text(_scanResult,
                      style: GoogleFonts.robotoMono(fontSize: 14)),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
