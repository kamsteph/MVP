
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

const String baseUrl = "http://192.168.106.154:8888"; // your API base

/// Registers a new user
Future<void> registerUser(
    BuildContext context, {
      required String name,
      required String email,
      required String password,
    }) async {
  final url = Uri.parse("$baseUrl/auth/register");
  final prefs = await SharedPreferences.getInstance();

  try {
    final response = await http.post(
      url,
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "name": name,
        "email": email,
        "password": password,
      }),
    );

    if (response.statusCode == 201) {
      _showSnack(context, "Account created successfully! Please log in.");
    } else {
      final body = jsonDecode(response.body);
      _showSnack(context, "Signup failed: ${body['detail'] ?? 'Unknown error'}", isError: true);
    }
  } catch (e) {
    _showSnack(context, "Signup error: $e", isError: true);
  }
}

/// Logs in and stores JWT token locally
Future<void> loginUser(
    BuildContext context, {
      required String email,
      required String password,
    }) async {
  final url = Uri.parse("$baseUrl/auth/login");
  final prefs = await SharedPreferences.getInstance();

  try {
    final response = await http.post(
      url,
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "email": email,
        "password": password,
      }),
    );

    if (response.statusCode == 200) {
      final body = jsonDecode(response.body);
      final token = body['access_token'];
      if (token != null) {
        await prefs.setString("jwt_token", token);
        _showSnack(context, "Login successful!");
      } else {
        _showSnack(context, "No token received", isError: true);
      }
    } else {
      final body = jsonDecode(response.body);
      _showSnack(context, "Login failed: ${body['detail'] ?? 'Invalid credentials'}", isError: true);
    }
  } catch (e) {
    _showSnack(context, "Login error: $e", isError: true);
  }
}

/// Helper to show consistent SnackBars
void _showSnack(BuildContext context, String message, {bool isError = false}) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(
      content: Text(message),
      backgroundColor: isError ? Colors.red : Colors.green,
    ),
  );
}

/// Retrieves saved JWT (for attaching to API calls)
Future<String?> getJwtToken() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString("jwt_token");
}
