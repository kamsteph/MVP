from datetime import datetime
from enum import Enum
from typing import Optional, List

from pydantic import BaseModel, Field

class ScanType(str, Enum):
    SCAN_ONLY = "Scan Only"
    SCAN_AND_ATTACK = "Scan + Attack"
class ScopeItem(BaseModel):
    scope: Optional[str] = None
    target: Optional[str] = None
    insider_file_ids: List[str] = Field(default_factory=list)
    codebase_file_ids: List[str] = Field(default_factory=list)
    port_mode: str="top10"
    packet_type: str = "TCP"
    subnet_mask: bool = False
    #vuln_tools: List[str] = Field(default_factory=list)
    #exploit_tool: Optional[str] = "Default"

class PentestTask(BaseModel):
    task_id: str
    type: str
    status: str
    progressMessage: str
    duration: float
    threatsFound: int
    riskLevel: str
    summary: Optional[str] = None
class ScanRequest(BaseModel):
    region: str
    scope: str
    scan_type: ScanType
    target: List[str]
    attack_surface: List[str]
    export_format: str = "json"
    cross_domain_insight: bool = False
    name: Optional[str] = None
    description: Optional[str] = None
    social_media_url: Optional[str] = None
    scopes: List[ScopeItem] = Field(default_factory=list)
    file_format: str = "pdf"
    #tools: Dict[str, Any] = Field(default_factory=dict)
    #top_ports: Optional[int] = None
    ports: Optional[List[int]] = None

class UploadedFile(BaseModel):
    id: str
    filename: str
    stored_path: str
    uploaded_at: datetime
    scope: str

class RegisterRequest(BaseModel):
    name: str
    email: str
    password: str

class LoginRequest(BaseModel):
    email: str
    password: str