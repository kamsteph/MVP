from typing import List, Optional, Any, Dict
from pydantic import BaseModel, Field

# ============================
# Models
# ============================
class VulnerabilityEntry(BaseModel):
    alert: str
    risk: str
    confidence: str
    url: str
    social_url: Optional[str]
    method: str
    param: Optional[str] = None
    attack: Optional[str] = None
    evidence: Optional[str] = None
    description: str
    solution: str
    cweid: Optional[str] = None
    wascid: Optional[str] = None
    sourceid: Optional[str] = None
    data: Optional[Dict[str, Any]] = None

    # OSINT + scraping
    osint: Optional[Dict] = None
    social_url: Optional[List[str]] = None
    bio: Optional[Dict[str, str]] = None
    whois: Optional[Dict] = None
    social_links: Optional[List[str]] = None

    class Config:
        extra = "allow"

class WebScanResult(BaseModel):
    error: Optional[str] = None
    vulnerabilities: List[VulnerabilityEntry]
    summary: str
    scan_tool: Optional[str] = None
    status: Optional[str] = None
    target: Optional[List[str]] = None
    raw_alerts_count: Optional[int] = None
    export_format: Optional[str] = "both"
    social_urls: Optional[List[str]] = Field(default_factory=list)

# class WebScanRequest(BaseModel):
#     url: List[str]
#     social_urls: List[str] = Field(default_factory=list)
#     export_format: str = "md"

# class OSINTSocialRequest(BaseModel):
#     social_urls: List[str]
