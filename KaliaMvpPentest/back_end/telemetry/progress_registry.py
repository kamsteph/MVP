# back_end/progress_registry.py
import asyncio
from datetime import datetime
from typing import Dict, Optional, List
from pydantic_models.schema import PentestTask

class ProgressRegistry:
    def __init__(self):
        self._store: Dict[str, PentestTask] = {}
        self._lock = asyncio.Lock()

    async def update(self, task_id: str, data: Dict):
        """Create or update a task's progress safely."""
        async with self._lock:
            now = datetime.utcnow().isoformat()
            data["last_updated"] = now
            current = self._store.get(task_id)
            if current:
                updated = current.model_copy(update=data)
                self._store[task_id] = updated
            else:
                self._store[task_id] = PentestTask(**data)

    async def get(self, task_id: str) -> Optional[PentestTask]:
        """Retrieve a single task progress snapshot."""
        async with self._lock:
            return self._store.get(task_id)

    async def all(self) -> List[PentestTask]:
        """Return all tasks currently being tracked."""
        async with self._lock:
            return list(self._store.values())


progress_registry = ProgressRegistry()
