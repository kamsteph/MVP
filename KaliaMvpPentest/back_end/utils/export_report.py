import os
import markdown2
import pdfkit
import bleach
import tempfile
import logging

def export_to_markdown(summary_text, directory, filename_base):
    os.makedirs(directory, exist_ok=True)
    file_path = os.path.join(directory, f"{filename_base}.md")

    title = "Web App Pentest Report" if "web" in filename_base else "Network Scan Report"
    with open(file_path, "w") as f:
        f.write(f"{title}\n\n")
        f.write(summary_text)

    print(f"[+] Markdown report saved to {file_path}")
    return file_path

def export_to_pdf(summary_text: str, directory: str, filename_base: str):
    """
    Exports a summary string to a PDF report with proper formatting and styling.
    """
    try:
        os.makedirs(directory, exist_ok=True)
    except OSError as e:
        logging.error(f"Could not create directory {directory}: {e}")
        return None

    # Sanitize and convert Markdown to HTML with enhanced features
    allowed_tags = ['h1', 'h2', 'h3', 'h4', 'p', 'strong', 'em', 'ul', 'ol', 'li', 'pre', 'code', 'br', 'div']
    sanitized_text = bleach.clean(summary_text, tags=allowed_tags, strip=True)
    html_content_body = markdown2.markdown(sanitized_text, extras=["fenced-code-blocks", "tables", "break-on-newline"])

    # Create a full HTML document with inline CSS for styling
    html_template = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{filename_base.replace('_', ' ').title()} Report</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; color: #333; }}
            h1, h2, h3, h4 {{ color: #0056b3; margin-top: 1.5em; margin-bottom: 0.5em; }}
            h1 {{ font-size: 2.2em; border-bottom: 2px solid #0056b3; padding-bottom: 5px; }}
            h2 {{ font-size: 1.8em; border-bottom: 1px solid #0056b3; padding-bottom: 3px; }}
            h3 {{ font-size: 1.4em; }}
            p {{ margin-bottom: 1em; }}
            ul, ol {{ margin-bottom: 1em; padding-left: 20px; }}
            li {{ margin-bottom: 0.5em; }}
            pre, code {{ background-color: #f4f4f4; border: 1px solid #ddd; padding: 10px; border-radius: 5px; font-family: 'Courier New', Courier, monospace; white-space: pre-wrap; word-break: break-all; }}
            pre {{ margin-bottom: 1em; overflow-x: auto; }}
            strong {{ font-weight: bold; }}
            em {{ font-style: italic; }}
        </style>
    </head>
    <body>
        {html_content_body}
    </body>
    </html>
    """

    # Use a temporary file to generate the PDF
    with tempfile.NamedTemporaryFile(suffix=".html", delete=False, mode="w", encoding="utf-8") as temp_html:
        temp_html.write(html_template)
        temp_html_path = temp_html.name

    file_path = os.path.join(directory, f"{filename_base}.pdf")

    try:
        pdfkit.from_file(temp_html_path, file_path)
        logging.info(f"PDF report saved to {file_path}")
    except Exception as e:
        logging.error(f"Failed to generate PDF: {e}")
        return None
    finally:
        os.unlink(temp_html_path)

    return file_path

def export_report(summary_text, directory, filename_base, export_format="both"):
    saved_files = []

    if export_format in ["md", "both"]:
        md_path = export_to_markdown(summary_text, directory, filename_base)
        saved_files.append(md_path)

    if export_format in ["pdf", "both"]:
        pdf_path = export_to_pdf(summary_text, directory, filename_base)
        saved_files.append(pdf_path)

    return saved_files
