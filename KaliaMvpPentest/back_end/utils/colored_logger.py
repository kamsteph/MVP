import logging

class ColorFormatter(logging.Formatter):
    COLORS = {
        "EXPLOITATION_AGENT": "\033[99;1m",
        "MANAGER": "\033[99;2m",
        "EVENTBUS": "\033[94m",
        "ORCHESTRATOR": "\033[97m",
        "RECON": "\033[96m",
        "OSINT": "\033[95m",                # Purple
        "VULNERABILITY_SCANNING": "\033[97m",  # White
        "EXPLOITATION": "\033[92m",         # Green
        "LEARNING": "\033[93m",             # Yellow
        "DEFENSE": "\033[92;1m",
        "HONEYNET": "\033[97;1m",           # Bold Red
        "WORKER": "\033[98m",
        "WRAPPER": "\033[98;1m",
        "LEARNER": "\033[99;3m",
        "RESET": "\033[0m",
    }

    def __init__(self, component="GENERAL", region="GLOBAL",
                 fmt="%(asctime)s | %(levelname)s | %(message)s"):
        super().__init__(fmt)
        self.component = component.upper()
        self.region = region.upper()

    def format(self, record):
        color = self.COLORS.get(self.component, self.COLORS["RESET"])
        message = super().format(record)
        return f"{color}[{self.region}][{self.component}] {message}{self.COLORS['RESET']}"

def get_logger(name: str, component: str = "GENERAL", region: str = "GLOBAL", level=logging.DEBUG):
    handler = logging.StreamHandler()
    handler.setFormatter(ColorFormatter(component, region))

    logger = logging.getLogger(name)
    logger.setLevel(level)

    # Remove duplicate handlers
    if logger.hasHandlers():
        logger.handlers.clear()

    logger.addHandler(handler)
    return logger
