import os
import time
import requests
from dotenv import load_dotenv
from back_end.database import DatabaseManager

# Load env vars from .env
load_dotenv()

# Optional API key (free)
NVD_API_KEY = os.getenv("NVD_API_KEY")
HEADERS = {"apiKey": NVD_API_KEY} if NVD_API_KEY else {}

# --- Function to fetch CVSS base score from NVD ---
def fetch_from_nvd_api(cve_id: str) -> float:
    """
    Fetch CVSS base score for a given CVE ID using NVD REST API.
    Returns 0.0 if not found or on error.
    """
    try:
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
        r = requests.get(url, headers=HEADERS, timeout=10)
        if r.status_code != 200:
            print(f"[WARN] NVD returned {r.status_code} for {cve_id}")
            return 0.0

        data = r.json()
        items = data.get("vulnerabilities", [])
        if not items:
            return 0.0

        metrics = items[0].get("cve", {}).get("metrics", {})
        for key in ["cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
            if key in metrics:
                cvss_data = metrics[key][0].get("cvssData", {})
                return float(cvss_data.get("baseScore", 0.0))

        return 0.0

    except Exception as e:
        print(f"[WARN] Failed to fetch CVSS for {cve_id}: {e}")
        return 0.0


# --- Batch update script ---
def update_cvss_scores(batch_size: int = 50, sleep_time: float = 5.0):
    """
    Fetches CVSS scores from NVD for missing or zeroed entries in augmented_database.
    Automatically respects rate limits (faster if API key is present).
    """
    db = DatabaseManager()
    col = db.adb_collection

    # Find CVEs with 0 or missing CVSS
    missing = list(col.find({"$or": [{"cvss": 0}, {"cvss": {"$exists": False}}]}, {"cve": 1}))
    print(f"üöÄ Starting CVSS update from NVD API...")
    print(f"Found {len(missing)} CVEs to update.")

    for i in range(0, len(missing), batch_size):
        batch = missing[i:i + batch_size]
        for doc in batch:
            cve_id = doc.get("cve")
            if not cve_id:
                continue

            cvss_score = fetch_from_nvd_api(cve_id)
            col.update_one({"_id": doc["_id"]}, {"$set": {"cvss": cvss_score}})
            print(f"‚úÖ Updated {cve_id} ‚Üí CVSS={cvss_score}")

        # Sleep between batches (respect rate limits)
        time.sleep(sleep_time)

    print("üéØ CVSS update completed!")


if __name__ == "__main__":
    # Faster if you have an API key
    if NVD_API_KEY:
        print("üîê Using NVD API key (high rate limit mode).")
        update_cvss_scores(batch_size=100, sleep_time=1.0)
    else:
        print("‚ö†Ô∏è No API key detected (low rate limit mode).")
        update_cvss_scores(batch_size=5, sleep_time=30.0)
