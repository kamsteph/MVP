from sentence_transformers import SentenceTransformer, util
from back_end.mini_transformer.attack_surfaces import ATTACK_SURFACE_MAP
from back_end.pentest_research import PentestResearchRAG

class AttackSurfaceTranslator:
    def __init__(self):
        self.model = SentenceTransformer("all-MiniLM-L6-v2")
        self.known_surfaces = list(ATTACK_SURFACE_MAP.keys())
        # Remove trailing comma â€” instantiate normally
        self.rag = PentestResearchRAG()
        self.surface_embeddings = self.model.encode(
            self.known_surfaces, convert_to_tensor=True
        )

    def translate(self, user_input: str, threshold: float = 0.6):
        input_embedding = self.model.encode(user_input, convert_to_tensor=True)
        scores = util.cos_sim(input_embedding, self.surface_embeddings)[0]

        best_idx = int(scores.argmax())
        best_score = float(scores[best_idx])

        if best_score >= threshold:
            surface = self.known_surfaces[best_idx]
            return {
                "surface": surface,
                "definition": ATTACK_SURFACE_MAP[surface],
                "score": best_score
            }

        # Fallback: query RAG for unknown / vague inputs
        try:
            rag_result = self.rag.research(
                f"User described attack surface: '{user_input}'. "
                "Explain what this means in pentest context with examples."
            )
        except Exception as e:
            # Log and fallback gracefully
            rag_result = f"[RAG error: {e}]"

        return {
            "surface": user_input,
            "definition": rag_result,
            "score": best_score
        }
