import asyncio
import inspect
import logging
from typing import Dict, Any, Callable, List
from back_end.utils.colored_logger import get_logger

logger = get_logger(__name__, component="EVENTBUS", region="ROUTE")
logger.setLevel(logging.DEBUG)

class EventBus:
    def __init__(self):
        self.subscribers: Dict[str, List[Callable]] = {}
        logger.info("EventBus initialized")

    def subscribe(self, event_name: str, handler: Callable):
        """Register a handler for a given event."""
        if event_name not in self.subscribers:
            self.subscribers[event_name] = []
        self.subscribers[event_name].append(handler)
        try:
            handler_name = handler.__name__
        except Exception:
            handler_name = repr(handler)
        logger.info(f"Handler {handler_name} subscribed to event '{event_name}'")

    def _maybe_schedule(self, handler: Callable, payload: Any):
        """
        If handler is an async function or returns a coroutine, schedule it with create_task.
        Otherwise call it synchronously.
        """
        try:
            # If handler is defined with `async def ...`
            if inspect.iscoroutinefunction(handler):
                asyncio.create_task(handler(payload))
                return

            # If handler is a callable that returns a coroutine instance:
            res = handler(payload)
            if inspect.iscoroutine(res):
                asyncio.create_task(res)
                return

            # sync function (returned value ignored)
        except Exception as e:
            logger.exception("Error while scheduling handler: %s", e)

    def publish_task(self, task: Dict[str, Any]):
        """Publish a task to all subscribed handlers for a given region."""
        # Generic "task" subscribers first (if any)
        for handler in self.subscribers.get("task", []):
            self._maybe_schedule(handler, task)

        # Validate region
        region = task.get("region")
        if not region or region not in self.subscribers:
            logger.error(f"No subscribers for region '{region}' or region not specified.")
            return

        logger.debug(f"Publishing task for region='{region}': {task}")

        # Now publish to specific region handlers
        for handler in self.subscribers[region]:
            try:
                self._maybe_schedule(handler, task)
            except Exception as e:
                try:
                    handler_name = handler.__name__
                except Exception:
                    handler_name = repr(handler)
                logger.exception(f"Error scheduling task for region '{region}' by handler '{handler_name}': {e}")

    def publish_event(self, event_name: str, payload: Dict[str, Any]):
        """Publish an event by name to all handlers subscribed to it."""
        if event_name not in self.subscribers:
            logger.warning(f"No subscribers for event '{event_name}'.")
            return
        logger.debug(f"Publishing event '{event_name}': {payload}")

        for handler in self.subscribers[event_name]:
            try:
                self._maybe_schedule(handler, payload)
            except Exception as e:
                try:
                    handler_name = handler.__name__
                except Exception:
                    handler_name = repr(handler)
                logger.exception(f"Error scheduling handler '{handler_name}' for event '{event_name}': {e}")
