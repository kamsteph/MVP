# back_end/websocket_bridge.py
import asyncio
import websockets
from bson.json_util import dumps
from back_end.event_bus import EventBus
from back_end.utils.colored_logger import get_logger

logger = get_logger(__name__, component="WS_BRIDGE", region="NETWORK")


class WebSocketBridge:
    """
    Bridges EventBus internal events to WebSocket clients (UI live updates).
    """

    def __init__(self, event_bus: EventBus):
        self.event_bus = event_bus
        self.clients = set()
        self.server = None

        # Subscribe to relevant events
        event_bus.subscribe("scan_progress", self.forward_event)
        event_bus.subscribe("scan_complete", self.forward_event)
        event_bus.subscribe("task_completed", self.forward_event)
        event_bus.subscribe("scan_telemetry", self.forward_event)
        event_bus.subscribe("scan_result", self.forward_event)

        # NEW: also subscribe to pipeline events
        event_bus.subscribe("network_recon_done", self.forward_event)
        event_bus.subscribe("network_vuln_scan", self.forward_event)
        event_bus.subscribe("network_vuln_done", self.forward_event)

        logger.info("WebSocketBridge subscribed to EventBus telemetry events")

    async def forward_event(self, payload):
        """
        Forwards an event from EventBus to all connected WebSocket clients.
        """

        if not self.clients:
            return  # nothing to send


        message = dumps({
            "event": payload.get("event", payload.get("action", "unknown")),
            "payload": payload
        })
        # Isolated broadcast to prevent one bad client breaking others
        tasks = []
        for client in list(self.clients):
            try:
                tasks.append(client.send(message))
            except Exception as e:
                logger.warning(f"Client send failed: {e}")
                self.clients.discard(client)

        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    async def handler(self, websocket, path):
        """
        Handles new WebSocket client connection.
        """
        self.clients.add(websocket)
        logger.info(f"[WSBridge] Client connected. Total: {len(self.clients)}")
        try:
            async for _ in websocket:
                pass
        except Exception as e:
            logger.warning(f"[WSBridge] Client error: {e}")
        finally:
            self.clients.discard(websocket)
            logger.info(f"[WSBridge] Client disconnected. Total: {len(self.clients)}")

    async def start(self, host="0.0.0.0", port=3000):
        """
        Starts the WebSocket server.
        """
        self.server = await websockets.serve(self.handler, host, port)
        logger.info(f"[WSBridge] Listening on ws://{host}:{port}")

    async def stop(self):
        """
        Gracefully shuts down the server and disconnects clients.
        """
        if self.server:
            self.server.close()
            await self.server.wait_closed()
            logger.info("[WSBridge] Server stopped")
            self.server = None
        for client in list(self.clients):
            try:
                await client.close()
            except Exception:
                pass
        self.clients.clear()
