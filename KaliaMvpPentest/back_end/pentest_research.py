# new_module/rag_agent.py
import os
from typing import Dict, Any, List
from langchain_chroma import Chroma
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain.chains import RetrievalQA

OPENAI_API_KEY=os.getenv("OPENAI_API_KEY")
class PentestResearchRAG:
    def __init__(self, persist_dir: str = "rag_store"):
        self.embeddings = OpenAIEmbeddings(model="text-embedding-3-small",openai_api_key=OPENAI_API_KEY)
        self.vectorstore = Chroma(
            persist_directory=persist_dir,
            embedding_function=self.embeddings,
        )
        self.llm = ChatOpenAI(temperature=0)
        self.qa = RetrievalQA.from_chain_type(
            llm=self.llm,
            retriever=self.vectorstore.as_retriever(search_kwargs={"k": 5})
        )

    def add_documents(self, docs: List[Dict[str, Any]]):
        """
        Add new docs (code snippets, configs, OSINT reports) to the knowledge base.
        """
        texts = [d["text"] for d in docs]
        metadatas = [d.get("metadata", {}) for d in docs]
        self.vectorstore.add_texts(texts, metadatas=metadatas)

    def research(self, query: str) -> str:
        """
        Ask the RAG agent about the target.
        """
        return self.qa.run(query)
