# new_module/data_augmentor.py
from datetime import datetime
from typing import Dict, Any
from pymongo.collection import Collection
from back_end.database import DatabaseManager
from back_end.utils.colored_logger import get_logger
import random



class DataAugmentor:
    """
    Enriches and augments raw scan results from standard_db, storing
    enhanced data in the augmented_database (ADB).
    """

    def __init__(self, db: DatabaseManager):
        self.db = db
        self.logger = get_logger(__name__, component="AUGMENTOR", region="DATA")
        self.standard_collection: Collection = db.results
        self.augmented_collection: Collection = db.adb_collection

    def run(self):
        """
        Main augmentation routine.
        Fetches unprocessed scan results, enriches them, stores in ADB,
        and marks originals as processed.
        """
        self.logger.info("Starting data augmentation process...")
        unprocessed = list(self.standard_collection.find({"l_region_processed": False}))
        self.logger.info(f"Found {len(unprocessed)} unprocessed scan results.")

        for result in unprocessed:
            try:
                augmented_result = self._augment_result(result)
                self.augmented_collection.insert_one(augmented_result)
                self.standard_collection.update_one(
                    {"_id": result["_id"]}, {"$set": {"l_region_processed": True}}
                )
                self.logger.info(f"Result {result['_id']} successfully augmented.")
            except Exception as e:
                self.logger.error(f"Failed to augment result {result['_id']}: {e}")

        self.logger.info("Data augmentation process completed.")

    def _augment_result(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applies enrichment rules to a single scan result.
        Can be extended to include CVSS scores, ATT&CK techniques, synthetic variations.
        """
        augmented = result.copy()
        augmented["augmented_db"] = datetime.now()
        augmented["synthetic_variations"] = []

        # Example 1: Add random CVSS scores if vulnerabilities exist
        if "vulnerabilities" in result:
            for vuln in result["vulnerabilities"]:
                score = round(random.uniform(4.0, 10.0), 1)
                augmented["synthetic_variations"].append(
                    {
                        "vuln": vuln,
                        "cvss_score": score,
                        "timestamp": datetime.now(),
                        "enriched_note": "Synthetic CVSS score added."
                    }
                )

        # Example 2: Enrich network results with random service banners
        if "open_ports" in result:
            augmented["synthetic_variations"].extend([
                {
                    "port": port,
                    "banner": f"Service-{port}-v{random.randint(1,10)}.0",
                    "timestamp": datetime.now()
                }
                for port in result["open_ports"]
            ])

        #more enrichment rules here (ATT&CK techniques, exploit success rates, etc.)

        return augmented

