# tests/test_benchmark_runner.py

import pytest
from back_end.database import DatabaseManager
from metrics.benchmark_runner import BenchmarkRunner
from pathlib import Path

@pytest.mark.asyncio
async def test_run_benchmark_minimal(monkeypatch, tmp_path):
    # Monkeypatch orchestrator and simulate full runner behavior
    runner = BenchmarkRunner()

    # FIX: Simulate both scan submission AND metric recording with correct data structure
    async def fake_submit(region, scan_type, target=None, **kwargs):
        # Manually create a fake metric record with the expected keys
        metric_record = {
            "scan_id": "fakeid",
            "stage": "scan_completion",
            "duration_sec": 1.5,
            "timestamp": "some_datetime",
            "status": "completed",
            "data": {},
        }
        # Append the new dictionary to the list
        runner.metrics.records.append(metric_record)
        return {"status": "accepted", "task_id": "fakeid"}

    runner.orchestrator.submit_scan_request = fake_submit

    # The rest of the test remains the same
    runner.scan_results["fakeid"] = {"region": "network", "target": ["127.0.0.1"], "status": "completed"}
    await runner.run_benchmark(runs=1, export_format="csv")

    # Check metrics recorded and exported file exists
    assert len(runner.metrics.records) >= 1
    csv_files = list(Path(".").glob("benchmark_results*.csv"))
    assert csv_files, "CSV export missing"
    stats = runner.metrics.aggregate_stats()
    assert "avg_time" in stats

    # Check SDB
    db = DatabaseManager()
    sdb_records = list(db.results.find({}))
    assert sdb_records, "No records stored in SDB"

    # The assertion should now pass
    assert "metrics" in sdb_records[0], "Metrics missing in SDB entry"

    persisted_db = DatabaseManager()
    persisted_record = persisted_db.results.find_one({"scan_id": "fakeid"})

    assert persisted_record is not None, "The record with scan_id 'fakeid' was not found in the database."
    assert persisted_record.get("metrics") is not None, "The persisted record is missing the 'metrics' field."

    print("--- Database Check ---")
    print("Record successfully found in the database:")
    print(persisted_record)