# tests/test_validator_mongo.py
import pytest

from back_end.database import DatabaseManager
from metrics.validator import DBResultValidator
import mongomock

db=DatabaseManager()
@pytest.fixture
def populated_mongo():
    client = mongomock.MongoClient()
    db = client["cyber_db"]
    # insert ground truth
    db.standard.insert_one({
        "ip": "127.0.0.1",
        "expected_ports": [22, 80],
        "expected_vulns": ["CVE-TEST-1"]
    })
    db.standard.insert_one({
        "domain": "example.com",
        "expected_endpoints": ["/login", "/admin"],
        "expected_vulns": ["SQLi"]
    })
    return db

def test_validate_network_with_mongomock(populated_mongo):
    validator = DBResultValidator(db)
    # inject mongomock DB
    validator.client = populated_mongo.client
    validator.db = populated_mongo

    system_output = {"ip": "127.0.0.1", "open_ports": [22, 80], "vulnerabilities": ["CVE-TEST-1"]}
    results = validator.validate_network(system_output, "127.0.0.1")
    assert results["ports"]["precision"] == 1
    assert results["vulnerabilities"]["f1"] == 1

def test_validate_web_with_mongomock(populated_mongo):
    validator = DBResultValidator(db)
    validator.client = populated_mongo.client
    validator.db = populated_mongo

    system_output = {"domain": "example.com", "endpoints": ["/login", "/admin"], "vulnerabilities": ["SQLi"]}
    results = validator.validate_web(system_output, "example.com")
    assert results["endpoints"]["recall"] == 1
    assert results["vulnerabilities"]["precision"] == 1
