# tests/conftest.py
from dotenv import load_dotenv
import pytest
import mongomock
from back_end.database import DatabaseManager

load_dotenv()  # ensure .env is loaded for OPENAI_API_KEY etc.

@pytest.fixture
def mongomock_client():
    return mongomock.MongoClient()

@pytest.fixture
def mocked_db(mongomock_client, tmp_path):
    # Create a DatabaseManager-like object that uses mongomock
    # We monkeypatch DatabaseManager to point to the mongomock DB.
    class MockDB(DatabaseManager):
        def __init__(self):
            # avoid connecting to real Mongo
            super().__init__()
            self.client = mongomock_client
            self.db = self.client["test_ai_pentest_db"]
            self.results = self.db.get_collection("standard_db")
            self.learning_data = self.db.get_collection("learning_data")
            self.adb = self.db.get_collection("augmented_database")

        def save_scan_result(self, result: dict):
            return self.results.insert_one(result)

    db = MockDB()
    yield db
