# tests/unit/test_database_manager.py
import pytest

from back_end.database import DatabaseManager


class DummyCollection:
    def __init__(self):
        self.data = []
        self.queries = []

    def insert_one(self, doc):
        self.data.append(doc)
        return {"acknowledged": True, "inserted_id": len(self.data)}

    def find(self, query=None):
        self.queries.append(query or {})
        if query is None:
            return self.data
        return [d for d in self.data if all(d.get(k) == v for k, v in query.items())]

    def update_one(self, query, update):
        for d in self.data:
            if d.get("_id") == query.get("_id"):
                d.update(update.get("$set", {}))
                return {"acknowledged": True}
        return {"acknowledged": False}


class DummyDB:
    def __init__(self):
        self.collections = {
            "standard_db": DummyCollection(),
            "stage_learning_area": DummyCollection(),
            "augmented_database": DummyCollection(),
            "exploits_gen": DummyCollection(),
            "vulnerability_gen": DummyCollection(),
        }

    def get_collection(self, name):
        return self.collections[name]


class DummyClient:
    def __init__(self):
        self._db = DummyDB()

    def get_database(self, name):
        return self._db


@pytest.fixture
def db_manager(monkeypatch):
    monkeypatch.setattr("back_end.database.MongoClient", lambda uri=None: DummyClient())
    return DatabaseManager()


def test_save_and_retrieve_results(db_manager):
    result = {"_id": "r1", "l_region_processed": False}
    db_manager.save_scan_result(result)

    unprocessed = list(db_manager.get_unprocessed_results())
    assert len(unprocessed) == 1
    assert unprocessed[0]["_id"] == "r1"


def test_mark_as_processed(db_manager):
    result = {"_id": "r2", "l_region_processed": False}
    db_manager.results.insert_one(result)

    db_manager.mark_as_processed("r2")
    updated = list(db_manager.results.find({"_id": "r2"}))[0]
    assert updated["l_region_processed"] is True


def test_learning_and_threat_intel(db_manager):
    db_manager.save_learning_data({"foo": "bar"})
    assert db_manager.learning_data.data[0]["foo"] == "bar"

    db_manager.adb_collection.insert_one({"intel": "x"})
    intel = list(db_manager.get_all_threat_intel())
    assert intel[0]["intel"] == "x"


def test_exploits_and_vulns(db_manager):
    db_manager.save_new_exploit({"exploit": "E1"})
    db_manager.save_new_vuln({"vuln": "V1"})

    exploits = db_manager.get_all_new_exploits()
    vulns = db_manager.get_all_new_vulns()

    assert exploits[0]["exploit"] == "E1"
    assert vulns[0]["vuln"] == "V1"
