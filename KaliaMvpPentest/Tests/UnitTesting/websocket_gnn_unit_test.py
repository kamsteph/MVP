# tests/test_websocket_gnn.py
import pytest
import asyncio
import json
from unittest.mock import AsyncMock, MagicMock

import torch

from back_end.GraphNN import PentestGNN, GNNBrain
from back_end.event_bus import EventBus
from back_end.websocket_bridge import WebSocketBridge


@pytest.mark.asyncio
async def test_websocket_bridge_forward_event():
    bus = EventBus()
    bridge = WebSocketBridge(bus)

    # Mock a client websocket
    mock_ws = AsyncMock()
    bridge.clients.add(mock_ws)

    # Send a payload
    payload = {"event": "scan_progress", "data": "test"}
    await bridge.forward_event(payload)

    # Ensure client.send called with proper JSON
    mock_ws.send.assert_called_once()
    sent_msg = json.loads(mock_ws.send.call_args[0][0])
    assert sent_msg["event"] == "scan_progress"
    assert sent_msg["payload"] == payload

@pytest.mark.asyncio
async def test_websocket_bridge_add_remove_client():
    bus = EventBus()
    bridge = WebSocketBridge(bus)

    mock_ws = AsyncMock()

    # Simulate connect
    bridge._on_connect(mock_ws)
    assert mock_ws in bridge.clients

    # Simulate disconnect
    bridge._on_disconnect(mock_ws)
    assert mock_ws not in bridge.clients

def test_gnnbrain_prediction_shape():
    gnn = GNNBrain(in_channels=4)
    scan_results = [
        {"vulnerabilities": [{}]*2, "risk": "high"},
        {"vulnerabilities": [{}]*1, "risk": "low"},
    ]
    pred = gnn.predict(scan_results)
    assert pred in ("exploitation", "deeper_scan")

def test_gnn_forward_output():
    model = PentestGNN(in_channels=4, hidden_channels=8, out_channels=2)
    # Dummy graph
    x = torch.rand((3, 4))
    edge_index = torch.tensor([[0, 1], [1, 2]], dtype=torch.long).t().contiguous()
    out = model(x, edge_index)
    assert out.shape == (3, 2)
    # Softmax log values
    assert torch.allclose(torch.exp(out).sum(dim=1), torch.ones(3), atol=1e-5)
