# tests/unit/test_pentest_orchestrator.py
import pytest
import uuid
from unittest.mock import MagicMock, patch

from back_end.pentest_orchestrator import PentestOrchestrator


@pytest.fixture
def fake_bus():
    bus = MagicMock()
    bus.publish_task = MagicMock()
    bus.subscribe = MagicMock()
    return bus

@pytest.fixture
def fake_db():
    db = MagicMock()
    db.results.find = MagicMock(return_value=[{
        "type": "initial_web_scan",
        "vulnerabilities": [{"alert": "SQL Injection", "risk": "High", "url": "/login"}]
    }])
    return db

def test_init_sets_regions_and_empty_tasks(fake_bus, fake_db):
    orch = PentestOrchestrator(fake_bus, fake_db)
    assert orch.regions == ["network", "web"]
    assert orch.completed_tasks == []

@pytest.mark.asyncio
async def test_submit_scan_request_valid(fake_bus, fake_db):
    orch = PentestOrchestrator(fake_bus, fake_db)

    with patch.object(orch.rag, "research", return_value="mocked research"):
        result = await orch.submit_scan_request(
            region="network",
            scan_type="nmap",
            scope="black",
            target=["127.0.0.1"]
        )

    assert result["status"] == "accepted"
    assert "task_id" in result
    fake_bus.publish_task.assert_called_once()
    fake_bus.subscribe.assert_called_once_with("task_completed", orch.handle_completed_task)

@pytest.mark.asyncio
async def test_submit_scan_request_invalid_region(fake_bus, fake_db):
    orch = PentestOrchestrator(fake_bus, fake_db)
    with pytest.raises(ValueError):
        await orch.submit_scan_request(region="invalid", scan_type="nmap", scope="black", target=["127.0.0.1"])

@pytest.mark.asyncio
async def test_submit_scan_request_missing_target(fake_bus, fake_db):
    orch = PentestOrchestrator(fake_bus, fake_db)
    with pytest.raises(ValueError):
        await orch.submit_scan_request(region="network", scan_type="nmap", scope="black", target=[])

def test_handle_completed_task_appends_result(fake_bus, fake_db):
    orch = PentestOrchestrator(fake_bus, fake_db)
    orch.handle_completed_task({"region": "network", "status": "done"})
    assert orch.completed_tasks[0]["status"] == "done"

@pytest.mark.asyncio
async def test_generate_final_report(fake_bus, fake_db):
    orch = PentestOrchestrator(fake_bus, fake_db)

    with patch("back_end.pentest_orchestrator.DataAugmentor") as MockAugmentor, \
            patch("back_end.pentest_orchestrator.export_report", return_value=["file1.md"]):
        MockAugmentor.return_value.run = MagicMock()

        await orch.generate_final_report(task_name="test_run", export_format="md")

        MockAugmentor.assert_called_once_with(fake_db)
        MockAugmentor.return_value.run.assert_called_once()
        fake_db.results.find.assert_called_once()
