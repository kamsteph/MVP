# tests/unit/test_event_bus.py
import pytest
from back_end.event_bus import EventBus


def test_subscribe_and_publish_task():
    bus = EventBus()
    received = {}

    def handler(task):
        received.update(task)

    # subscribe the handler to a region
    bus.subscribe("network", handler)

    # publish a task for that region
    task = {"region": "network", "id": "task1"}
    bus.publish_task(task)

    assert received == task


def test_publish_task_no_region(caplog):
    bus = EventBus()

    caplog.set_level("ERROR")
    bus.publish_task({"id": "task2"})  # no region key
    assert "region" in caplog.text.lower()


def test_publish_task_unsubscribed_region(caplog):
    bus = EventBus()

    caplog.set_level("ERROR")
    bus.publish_task({"region": "web", "id": "task3"})
    assert "no subscribers" in caplog.text.lower()


def test_publish_event_with_subscriber():
    bus = EventBus()
    received = {}

    def handler(payload):
        received.update(payload)

    bus.subscribe("task_completed", handler)
    event_payload = {"status": "done"}
    bus.publish_event("task_completed", event_payload)

    assert received == event_payload


def test_publish_event_without_subscriber(caplog):
    bus = EventBus()

    caplog.set_level("WARNING")
    bus.publish_event("unsubscribed_event", {"foo": "bar"})
    assert "no subscribers" in caplog.text.lower()


def test_handler_exception_is_caught(caplog):
    bus = EventBus()

    def faulty_handler(task):
        raise RuntimeError("boom")

    bus.subscribe("network", faulty_handler)

    caplog.set_level("ERROR")
    bus.publish_task({"region": "network", "id": "task4"})

    # we log the exception but don't crash
    assert "error processing task" in caplog.text.lower()
