from pymongo import MongoClient
from pprint import pprint

class PricingManager:
    def __init__(self, db):
        self.db = db
        self.telemetry_logs = db.get_collection("telemetry_logs")

        # Default pricing parameters
        self.cpu_cost_per_second = 0.00001
        self.ai_inference_cost = 0.002
        self.storage_cost_per_gb_month = 0.01
        self.retention_days = 30
        self.markup_factor = 1.25
        self.flat_fee = 0.05

    def get_logs(self, filter_query=None):
        """Fetch telemetry logs from MongoDB"""
        if filter_query is None:
            filter_query = {}
        logs = list(self.telemetry_logs.find(filter_query))
        return logs

    def compute_price(self, log):
        """Compute the price based on telemetry data"""
        cpu_seconds = log.get("cpu_seconds", 0)
        storage_size_mb = log.get("storage_size_mb", 0)
        ai_used = "model_name" in log and log["model_name"].startswith("ai_")

        compute_cost = cpu_seconds * self.cpu_cost_per_second
        inference_cost = self.ai_inference_cost if ai_used else 0
        storage_cost = (
                (storage_size_mb / 1024)
                * self.storage_cost_per_gb_month
                * (self.retention_days / 30)
        )

        total_cost = compute_cost + inference_cost + storage_cost
        price = total_cost * self.markup_factor + self.flat_fee

        return {
            "task_id": log.get("task_id"),
            "user_id": log.get("user_id"),
            "model_name": log.get("model_name"),
            "cpu_seconds": cpu_seconds,
            "storage_size_mb": storage_size_mb,
            "ai_used": ai_used,
            "cost_details": {
                "compute_cost": round(compute_cost, 6),
                "inference_cost": round(inference_cost, 6),
                "storage_cost": round(storage_cost, 6),
                "total_cost": round(total_cost, 6),
            },
            "final_price": round(price, 6),
        }

    def get_all_pricing(self):
        """Fetch all logs and compute pricing for each"""
        logs = self.get_logs()
        return [self.compute_price(log) for log in logs]


def main():
    try:
        client = MongoClient("mongodb+srv://kamsteph:Test1234@kaliacluster.mzupz.mongodb.net/?retryWrites=true&w=majority&appName=kaliaCluster", serverSelectionTimeoutMS=2000)
        db = client["ai_pentest_dbs"]
        # Test the connection
        client.server_info()
        print("‚úÖ Connected to MongoDB.")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not connect to MongoDB: {e}")
        # Fallback mock DB simulation
        class MockDB:
            def get_collection(self, name):
                return self
            def find(self, _=None):
                return [
                    {
                        "task_id": None,
                        "user_id": "unknown",
                        "event": "scan_complete",
                        "progress": 100,
                        "threats_found": 0,
                        "risk_level": "Unknown",
                        "duration": 2.93,
                        "summary": "No summary available.",
                        "model_name": "ai_pentest_orchestrator_v1",
                        "runtime_seconds": 2.93,
                        "cpu_seconds": 0.172,
                        "ram_used_mb": 40.812,
                        "timestamp": "2025-10-05 12:27:05",
                        "storage_size_mb": 0.0001,
                        "cost_estimate_usd": 0.0005
                    },
                    {
                        "task_id": "task_002",
                        "user_id": "user123",
                        "event": "scan_complete",
                        "cpu_seconds": 1.0,
                        "storage_size_mb": 2.5,
                        "model_name": "manual_scan_v2"
                    }
                ]
        db = MockDB()

    pricing_manager = PricingManager(db)
    results = pricing_manager.get_all_pricing()

    print("\nüìä Pricing Results:")
    for i, result in enumerate(results, 1):
        print(f"\n--- Result #{i} ---")
        pprint(result)


if __name__ == "__main__":
    from pymongo import MongoClient

    try:
        client = MongoClient("mongodb+srv://kamsteph:Test1234@kaliacluster.mzupz.mongodb.net/?retryWrites=true&w=majority&appName=kaliaCluster")
        db = client["ai_pentest_dbs"]
        print("‚úÖ Connected to MongoDB.\n")
    except Exception as e:
        print(f"‚ùå Failed to connect to MongoDB: {e}")
        exit(1)

    pricing_manager = PricingManager(db)
    results = pricing_manager.get_all_pricing()

    print("üìä Pricing Results:\n")

    # --- Display detailed results ---
    for idx, res in enumerate(results, start=1):
        print(f"--- Result #{idx} ---")
        print(res)
        print()

    # --- Display clear summary outside the full results ---
    print("üí∞ Price Summary:\n")
    total_price = 0
    for idx, res in enumerate(results, start=1):
        price = res["final_price"]
        total_price += price
        task = res.get("task_id") or "no_task_id"
        print(f"{idx}. Task ID: {task} ‚Üí ${price:.6f}")

    avg_price = total_price / len(results) if results else 0
    print(f"\nüìà Average Price: ${avg_price:.6f}")
    print(f"üì¶ Total Sum: ${total_price:.6f}")
