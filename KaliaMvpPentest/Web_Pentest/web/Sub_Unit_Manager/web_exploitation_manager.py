# back_end/Regions/web/web_exploitation_manager.py
import asyncio
from typing import List, Dict, Any
import logging

from Web_Pentest.web.web_exploitation import WebExploitation
from back_end.database import DatabaseManager
from back_end.utils.colored_logger import get_logger

logger = get_logger(__name__, component="EXPLOITATION", region="WEB")
logger.setLevel(logging.INFO)

class WebExploitationManager:
    """
    Autonomous web exploitation manager.
    Runs exploits asynchronously and saves results to DB.
    Does NOT interact directly with L-Region.
    """
    def __init__(self, db: DatabaseManager, web_exploitation: WebExploitation, concurrency: int = 4):
        self.db = db
        self.executor = web_exploitation
        self._sem = asyncio.Semaphore(concurrency)

    async def handle_exploitation(self, target: str, vulnerabilities: List[Dict[str, Any]]):
        """
        Perform exploitation asynchronously for a target and given vulnerabilities.
        """
        if not target:
            logger.warning("[WebExploitationManager] No target specified, skipping.")
            return []

        if not vulnerabilities:
            logger.info("[WebExploitationManager] No vulnerabilities provided for %s, skipping.", target)
            return []

        results = []
        for vuln in vulnerabilities:
            async with self._sem:
                try:
                    exec_res = await self._run_exploit(vuln, target)
                    results.append(exec_res)
                except Exception as e:
                    logger.error("Exploitation failed for %s: %s", target, e)
                    results.append({"target": target, "vuln": vuln.get("alert"), "status": "failed", "error": str(e)})

        # Save summary to DB
        summary = {
            "target": target,
            "timestamp": asyncio.get_event_loop().time(),
            "results": results,
            "type": "web_exploitation_summary"
        }
        try:
            self.db.save_scan_result(summary)
        except Exception as e:
            logger.warning("Failed to save exploitation summary: %s", e)

        return results

    async def _run_exploit(self, vuln: Dict[str, Any], target: str):
        """
        Internal async wrapper for WebExploitation execution.
        """
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self.executor.run_exploits, target, [vuln])

    def run(self, target: str, vulnerabilities: List[Dict[str, Any]]):
        """
        Synchronous wrapper for handling exploitation.
        """
        return asyncio.run(self.handle_exploitation(target, vulnerabilities))
