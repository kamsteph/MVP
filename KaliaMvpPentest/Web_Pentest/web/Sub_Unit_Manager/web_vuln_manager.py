# new_module/web_vuln_manager.py
import logging
import os
from typing import Dict, Any

from Web_Pentest.web.web_vuln_scan import VulnScan
from back_end.utils.colored_logger import get_logger
from back_end.database import DatabaseManager
from back_end.event_bus import EventBus

logger = get_logger(__name__, component="VULNERABILITY_SCANNING", region="WEB")
logger.setLevel(logging.INFO)


#loading env key
ZAP_PROXY=os.getenv("ZAP_PROXY")
ZAP_API_KEY=os.getenv("ZAP_API_KEY")
class WebVulnManager:
    def __init__(self, bus: EventBus, db: DatabaseManager, vuln_scanner: VulnScan):
        self.bus = bus
        self.db = db
        self.vuln_scanner = vuln_scanner
        self.bus.subscribe("run_web_vuln_scan", self.run_scan)

    async def run_scan(self, task: Dict[str, Any]):
        task_id = task.get("id")
        targets = task.get("target", [])
        recon_results = task.get("scan_results", {})
        hints = task.get("hints", {})
        research = task.get("research")

        if not targets:
            logger.error("WebVulnManager received empty targets.")
            return

        all_results = {}
        for target in targets:
            try:
                vulns = self.vuln_scanner.run_zap_scan(target, recon_results.get(target))
                serialized_vulns = [v.model_dump() for v in vulns]

                # Save in DB with task_id
                scan_data = {
                    "task_id": task_id,
                    "region": "web",
                    "type": "vulnerability_scan",
                    "target": target,
                    "results": serialized_vulns,
                    "hints": hints,
                    "research": research,
                }
                self.db.save_scan_result(scan_data)
                all_results[target] = serialized_vulns
                logger.info(f"Web vuln scan done for {target} ({len(vulns)} findings).")

                # Honeynet + learning
                self.bus.publish_task({
                    "id": task_id,
                    "region": "deploy_honeynet",
                    "type": "E-HONEYPOT",
                    "vuln_files": serialized_vulns
                })
                self.bus.publish_task({
                    "id": task_id,
                    "region": "learning",
                    "source_region": "web",
                    "results": serialized_vulns
                })

            except Exception as e:
                logger.error(f"Web vuln scan failed for {target}: {e}")
                all_results[target] = {"error": str(e)}

        # Signal completion
        self.bus.publish_task({
            "id": task_id,
            "region": "web",
            "action": "vulnerability_scan_complete",
            "targets": targets,
            "status": "success",
            "results": all_results
        })
