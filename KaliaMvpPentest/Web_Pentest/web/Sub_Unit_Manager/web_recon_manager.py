# back_end/Regions/web/web_recon_manager.py
import logging
from typing import Dict, Any

from Web_Pentest.web.web_recon import Recon
from back_end.database import DatabaseManager
from back_end.event_bus import EventBus
from back_end.utils.colored_logger import get_logger

logger = get_logger(__name__, component="RECON_MANAGER", region="WEB")
logger.setLevel(logging.INFO)


class WebReconManager:
    """
    Autonomous unit for Web reconnaissance.
    Wraps the Recon engine, handles errors, saves results, and publishes next tasks.
    """
    def __init__(self, bus: EventBus, db: DatabaseManager, recon_engine: Recon):
        self.bus = bus
        self.db = db
        self.recon_engine = recon_engine

        # Subscribe to events
        self.bus.subscribe("web_recon_scan", self.run_scan)
        logger.info("[WebReconManager] Initialized and listening for 'web_recon_scan' events.")

    def run_scan(self, task: Dict[str, Any]):
        task_id = task.get("id")
        targets = task.get("target", [])  # unified key
        research_notes = task.get("research")
        hints = task.get("hints", {})

        if not targets:
            logger.warning("[WebReconManager] Received empty targets.")
            return

        logger.info(f"[WebReconManager] Starting scan for task {task_id} on targets {targets}")
        if research_notes:
            logger.info(f"[WebReconManager] Research bias: {research_notes}")
        if hints:
            logger.info(f"[WebReconManager] Hints: {hints}")

        all_results = {}
        for target in targets:
            try:
                recon_results = self.recon_engine.full_recon(target)
                all_results[target] = [v.model_dump() for v in recon_results]
            except Exception as e:
                logger.error("[WebReconManager] Recon failed for %s: %s", target, e)
                all_results[target] = {"error": str(e)}

        # Save results with task_id
        scan_summary = {
            "task_id": task_id,
            "type": "web_recon",
            "targets": targets,
            "results": all_results,
            "hints": hints,
            "research": research_notes
        }
        self.db.save_scan_result(scan_summary)

        # Publish task for vuln scan
        self.bus.publish_task({
            "id": task_id,
            "region": "web",
            "action": "run_web_vuln_scan",
            "target": targets,
            "scan_results": all_results,
            "hints": hints,
            "research": research_notes
        })
        logger.info(f"[WebReconManager] Published 'run_web_vuln_scan' for task {task_id}")
