# regions/web/web_vuln_scan.py
from typing import List, Optional
from zapv2 import ZAPv2
import time
import logging
import os
import sys


from back_end.utils.colored_logger import get_logger
from back_end.utils.export_report import export_to_pdf
from pydantic_models.web_Models import VulnerabilityEntry

logger = get_logger(__name__,component="VULNERABILITY_SCANNING",region="WEB")
logger.setLevel(logging.INFO)  # Make sure INFO logs are shown
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter("[%(asctime)s] %(levelname)s: %(message)s")
ch.setFormatter(formatter)
logger.addHandler(ch)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)


class VulnScan:
    """
    Web vulnerability scanner.
    Supports automatic feeding from Recon results.
    """
    def __init__(self, zap_api_key: str, zap_proxy: str):
        self.zap_api_key = zap_api_key
        self.zap_proxy = zap_proxy

    def run_zap_scan(
            self, target: str, recon_data: Optional[List[VulnerabilityEntry]] = None
    ) -> List[VulnerabilityEntry]:
        """
        Run ZAP scan.
        If recon_data is provided, use it to prioritize endpoints or forms.
        """
        logger.info(f"[ZAP] Initializing scan for target: {target}")
        zap = ZAPv2(apikey=self.zap_api_key, proxies={'http': self.zap_proxy, 'https': self.zap_proxy})

        try:
            zap.urlopen(target)
            logger.info(f"[ZAP] Successfully opened target {target}")
        except Exception as e:
            logger.error(f"[ZAP] Failed to open target {target}: {e}")

        time.sleep(2)

        # --- Optionally seed URLs from recon_data ---
        if recon_data:
            logger.info(f"[ZAP] Seeding {len(recon_data)} URLs from recon data")
            for entry in recon_data:
                try:
                    if entry.url:
                        zap.urlopen(entry.url)
                        logger.info(f"[ZAP] Seeded {entry.url}")
                except Exception as e:
                    logger.warning(f"[ZAP] Failed to seed {entry.url}: {e}")

        # Spider scan
        logger.info("[ZAP] Starting spider scan...")
        spider_id = zap.spider.scan(target)
        while int(zap.spider.status(spider_id)) < 100:
            progress = zap.spider.status(spider_id)
            logger.info(f"[ZAP] Spidering... {progress}%")
            time.sleep(1)
        logger.info("[ZAP] Spidering complete")

        # Active scan
        logger.info("[ZAP] Starting active vulnerability scan...")
        scan_id = zap.ascan.scan(target)
        while int(zap.ascan.status(scan_id)) < 100:
            progress = zap.ascan.status(scan_id)
            logger.info(f"[ZAP] Active scanning... {progress}%")
            time.sleep(1)
        logger.info("[ZAP] Active scan complete")

        # Collect alerts
        alerts = zap.core.alerts(baseurl=target)
        logger.info(f"[ZAP] Retrieved {len(alerts)} alerts from ZAP")

        vulns = []
        for alert in alerts:
            logger.info(f"[ZAP] Found: {alert.get('alert')} (Risk: {alert.get('risk')}, URL: {alert.get('url')})")
            vulns.append(VulnerabilityEntry(
                alert=alert.get("alert", "N/A"),
                risk=alert.get("risk", "Info"),
                confidence=alert.get("confidence", "High"),
                url=alert.get("url", target),
                method=alert.get("method", "N/A"),
                param=alert.get("param"),
                attack=alert.get("attack"),
                evidence=alert.get("evidence"),
                description=alert.get("description", ""),
                solution=alert.get("solution", ""),
                cweid=alert.get("cweid"),
                wascid=alert.get("wascid"),
                sourceid=alert.get("sourceid"),
                data=alert,
                social_url=alert.get("social_url"),
            ))

            # --- Build summary report text like network scan ---
        summary_lines = [
            "# Web Vulnerability Scan Report",
            f"## Target: `{target}`",
            f"## Total Vulnerabilities Found: {len(vulns)}",
            "",
            "### Findings:"
        ]

        for v in vulns:
            summary_lines.append(
                f"- **{v.alert}** (Risk: {v.risk}, Confidence: {v.confidence}, URL: {v.url})"
            )

        summary_text = "\n".join(summary_lines)

        # Export PDF
        try:
            export_to_pdf(summary_text, BASE_DIR, "web_vulnerability_scan")
            logger.info("[ZAP] Exported vulnerability report to PDF")
        except Exception as e:
            logger.error(f"[ZAP] Failed to export PDF report: {e}")

        return vulns
