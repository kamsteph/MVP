import re
import requests
import logging
from bs4 import BeautifulSoup

from back_end.utils.colored_logger import get_logger

# Configure logger for this module
logger = get_logger(__name__,component="SCRAPPING",region="WEB")
logger.setLevel(logging.DEBUG)

def scrape_bio(url: str) -> str:
    """
    Attempt to scrape a profile bio from a social media page.
    Currently uses naive <meta name="description"> extraction.
    """
    try:
        logger.info("[SCRAPER] Scraping bio from: %s", url)
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")

        bio = soup.find("meta", {"name": "description"})
        if bio:
            logger.debug("Bio found for %s", url)
            return bio["content"]

        logger.warning("No bio found on %s", url)
        return "Bio not found"
    except Exception as e:
        logger.error("Error scraping bio from %s: %s", url, e)
        return f"Scraping error: {e}"


def discover_social_links(url: str):
    """
    Crawl the given URL and attempt to discover common social media links.
    Currently supports Facebook, Twitter, LinkedIn, Instagram.
    """
    logger.info("[DISCOVERY] Searching for social media links on %s", url)
    try:
        res = requests.get(url, timeout=5)
        soup = BeautifulSoup(res.text, "html.parser")
        links = [a['href'] for a in soup.find_all("a", href=True)]
        logger.debug("Found %d links on %s", len(links), url)

        # Common social patterns
        social_patterns = {
            "facebook": r"facebook\.com",
            "twitter": r"twitter\.com",
            "linkedin": r"linkedin\.com",
            "instagram": r"instagram\.com",
        }

        discovered = []
        for link in links:
            for platform, pattern in social_patterns.items():
                if re.search(pattern, link):
                    logger.debug("Discovered %s link: %s", platform, link)
                    discovered.append(link)

        unique_links = list(set(discovered))
        logger.info("Total %d social media links discovered on %s", len(unique_links), url)
        return unique_links
    except Exception as e:
        logger.error("Could not discover social links from %s: %s", url, e)
        return []
