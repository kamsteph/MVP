import pytest
import json
from unittest.mock import MagicMock

import Web_Pentest.web.web_recon as web_recon
from Web_Pentest.web import WebReconManager


# --------------------
# Tests for Recon
# --------------------
def test_enumerate_subdomains_subfinder(monkeypatch):
    """Should return subdomains when Subfinder works."""
    r = web_recon.Recon(nuclei_path="dummy", subfinder_path="subfinder", amass_path="amass")

    monkeypatch.setattr(web_recon.os.path, "exists", lambda p: True)
    fake_result = MagicMock()
    fake_result.returncode = 0
    fake_result.stdout = "a.example.com\nb.example.com\n"
    monkeypatch.setattr(web_recon.subprocess, "run", lambda *a, **k: fake_result)

    subs = r.enumerate_subdomains("example.com")
    assert set(subs) == {"a.example.com", "b.example.com"}


def test_enumerate_subdomains_fallback(monkeypatch):
    """Should fallback to root domain if no tools or results."""
    r = web_recon.Recon(nuclei_path="dummy")
    monkeypatch.setattr(web_recon.os.path, "exists", lambda p: False)

    subs = r.enumerate_subdomains("example.com")
    assert subs == ["example.com"]


def test_run_nuclei_scan_success(monkeypatch, tmp_path):
    """Should parse nuclei output and enrich with fake OSINT."""
    dummy_path = tmp_path / "nuclei"
    dummy_path.write_text("")  # simulate nuclei binary
    r = web_recon.Recon(nuclei_path=str(dummy_path))

    # Patch os.path.exists to return True
    monkeypatch.setattr(web_recon.os.path, "exists", lambda p: True)

    # Patch subprocess.run to write a fake json file
    def fake_run(cmd, capture_output, text):
        output_file = cmd[-1]
        data = {"templateID": "xss", "severity": "medium", "host": "http://target"}
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(json.dumps(data) + "\n")
        m = MagicMock()
        m.returncode = 0
        return m

    monkeypatch.setattr(web_recon.subprocess, "run", fake_run)

    # Patch enrichment functions
    monkeypatch.setattr(web_recon, "gather_main_osint_info", lambda t: {"whois": {"org": "TestOrg"}})
    monkeypatch.setattr(web_recon, "discover_social_links", lambda t: ["http://social.test"])
    monkeypatch.setattr(web_recon, "gather_social_osint_info", lambda s: {"social": "data"})
    monkeypatch.setattr(web_recon, "scrape_bio", lambda s: "bio text")

    vulns = r.run_nuclei_scan(["http://target"])
    assert len(vulns) == 1
    v = vulns[0]
    assert v.alert == "xss"
    assert v.risk == "Medium"
    assert v.whois == {"org": "TestOrg"}


def test_run_nuclei_scan_binary_missing(monkeypatch):
    """Should raise FileNotFoundError if nuclei binary not found."""
    r = web_recon.Recon(nuclei_path="not_found")

    monkeypatch.setattr(web_recon.os.path, "exists", lambda p: False)

    with pytest.raises(FileNotFoundError):
        r.run_nuclei_scan(["target.com"])


# --------------------
# Tests for WebReconManager
# --------------------
def test_web_recon_manager_run_scan_success(monkeypatch):
    """Should call recon_engine.full_recon, save results, and publish next task."""
    fake_bus = MagicMock()
    fake_db = MagicMock()
    fake_recon = MagicMock()
    fake_recon.full_recon.return_value = [MagicMock(model_dump=lambda: {"alert": "xss"})]

    mgr = WebReconManager(fake_bus, fake_db, fake_recon)

    task = {"id": "T1", "target": ["example.com"], "research": "note", "hints": {"k": "v"}}
    mgr.run_scan(task)

    fake_recon.full_recon.assert_called_once_with("example.com")
    fake_db.save_scan_result.assert_called_once()
    fake_bus.publish_task.assert_called_once()
    published = fake_bus.publish_task.call_args[0][0]
    assert published["action"] == "run_web_vuln_scan"


def test_web_recon_manager_run_scan_no_targets(monkeypatch):
    """Should warn and return if task has no targets."""
    fake_bus = MagicMock()
    fake_db = MagicMock()
    fake_recon = MagicMock()

    mgr = WebReconManager(fake_bus, fake_db, fake_recon)

    task = {"id": "T2"}
    result = mgr.run_scan(task)

    assert result is None
    fake_db.save_scan_result.assert_not_called()
    fake_bus.publish_task.assert_not_called()
