# main.py
import argparse
import json
import os
import sys
from typing import List, Optional, Dict, Any

# Adjust this import to match your project layout
from Web_Pentest.web.web_osint import gather_main_osint_info, gather_social_osint_info, gather_email_osint


def pretty_print_section(title: str, data: Any) -> None:
    print("\n" + "=" * 60)
    print(f"{title}")
    print("=" * 60)
    if data is None or data == {}:
        print("(no data)")
        return
    # Print small dicts/strings simply, larger structures as JSON
    if isinstance(data, (str, int, float)):
        print(data)
    elif isinstance(data, dict) and len(data) <= 8:
        for k, v in data.items():
            print(f"{k}: {v}")
    else:
        try:
            print(json.dumps(data, indent=4, ensure_ascii=False))
        except Exception:
            print(repr(data))

def run_osint(url: Optional[str] = None,
              social_urls: Optional[List[str]] = None,
              pretty: bool = True,
              out_file: Optional[str] = None) -> Dict[str, Any]:
    """
    Programmatic entrypoint for OSINT.
    - If `url` is provided, calls gather_main_osint_info(url).
    - If `social_urls` is provided, calls gather_social_osint_info(social_urls).
    Returns a dict with results.
    """
    results: Dict[str, Any] = {}

    if url:
        print(f"[+] Running Web OSINT for {url}")
        results["web_osint"] = gather_main_osint_info(url)
    else:
        print("[!] No URL provided to run web OSINT.")

    if social_urls:
        print(f"[+] Running Social OSINT for {len(social_urls)} URL(s)")
        results["social_osint"] = gather_social_osint_info(social_urls)

    if pretty and "web_osint" in results:
        web = results["web_osint"]
        # Top-level friendly summary
        pretty_print_section("HTTP Headers", web.get("headers"))
        pretty_print_section("DNS (A / MX / NS)", web.get("dns"))
        pretty_print_section("Resolved IP", web.get("ip"))
        pretty_print_section("Reverse DNS (PTR)", web.get("reverse_dns"))
        pretty_print_section("RDAP / WHOIS", web.get("rdap"))
        pretty_print_section("Shodan", web.get("shodan"))

        if "social_osint" in results:
            pretty_print_section("Social OSINT (status codes)", results["social_osint"])

    # Save to file if requested
    if out_file:
        try:
            with open(out_file, "w", encoding="utf-8") as f:
                json.dump(results, f, indent=4, ensure_ascii=False)
            print(f"\n[+] Results written to {out_file}")
        except Exception as e:
            print(f"[!] Failed to write output to {out_file}: {e}", file=sys.stderr)

    # If not pretty, still return raw results; the caller may print them
    if not pretty:
        print(json.dumps(results, indent=4))

    return results


def parse_args_and_run() -> None:
    parser = argparse.ArgumentParser(description="OSINT Toolkit")
    parser.add_argument("--url", help="Target URL for web OSINT (e.g. https://example.com)")
    parser.add_argument("--social", nargs="*", help="List of social media profile URLs to check")
    parser.add_argument("--env-target", action="store_true",
                        help="If set, read target URL from environment variable OSINT_TARGET")
    parser.add_argument("--no-pretty", action="store_true", help="Disable pretty printing")
    parser.add_argument("--out", help="Write full JSON output to file (e.g. --out results.json)")
    args = parser.parse_args()

    # Option: read target from environment variable if requested
    env_url = None
    if args.env_target:
        env_url = os.getenv("OSINT_TARGET")
        if not env_url:
            print("[!] Environment variable OSINT_TARGET not set.")

    # Choose which URL to use (CLI > ENV)
    hardcoded_url = "https://www.snapchat.com/@mia?sender_web_id=9517c1a5-a07d-42fe-92cb-17a2beaedea0&device_type=desktop&is_copy_url=true"

    target_url = args.url or env_url or hardcoded_url

    # If you intentionally want to run a hardcoded target for quick testing,
    # uncomment and edit the following line (or pass via CLI). Right now we prefer using provided values.
    # target_url = "https://www.snapchat.com/@mia?sender_web_id=..."

    if not target_url and not args.social:
        parser.print_help()
        return

    run_osint(url=target_url, social_urls=args.social, pretty=not args.no_pretty, out_file=args.out)


    res = gather_email_osint("mchermiae@gmail.com")
    print(json.dumps(res, indent=4))

if __name__ == "__main__":
    # Example of programmatic usage inside this file (direct call)
    # Uncomment to run directly without CLI:
    #
    # run_osint(
    #     url="https://www.snapchat.com/@mia?sender_web_id=9517c1a5-a07d-42fe-92cb-17a2beaedea0&device_type=desktop&is_copy_url=true",
    #     social_urls=[],
    #     pretty=True,
    #     out_file="snapchat_osint.json"
    # )
    #
    # Otherwise use CLI:
    parse_args_and_run()
