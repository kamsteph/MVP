import pytest
from unittest.mock import MagicMock, patch
from global_local_learner.l_region import LocalLearner, MIN_INTEREST_SCORE

@pytest.fixture
def mock_bus():
    bus = MagicMock()
    return bus

@pytest.fixture
def learner(mock_bus):
    with patch("back_end.Regions.l_region.local_learner.DatabaseManager"):
        with patch("back_end.Regions.l_region.local_learner.LocalHelper"):
            return LocalLearner(region="web", bus=mock_bus)

def test_init_subscribes(mock_bus):
    with patch("back_end.Regions.l_region.local_learner.DatabaseManager"):
        with patch("back_end.Regions.l_region.local_learner.LocalHelper"):
            learner = LocalLearner(region="net", bus=mock_bus)
            mock_bus.subscribe.assert_called_once()

def test_normalize_multiple_vulns(learner):
    raw = [{"target": "10.0.0.1", "vulnerabilities": [{"id": "v1"}, {"id": "v2"}]}]
    out = learner._normalize_input(raw)
    assert len(out) == 2
    assert all("target" in e for e in out)

def test_filter_noise_duplicate(learner):
    event = {"target": "x", "vuln": {"id": "v1"}, "timestamp": learner._now_ts()}
    learner.recent_events.append(event)
    out = learner._filter_noise([event])
    assert out == []  # duplicate dropped

def test_enrich_event_adds_fields(learner):
    e = {"target": "1.2.3.4", "vuln": {"id": "xss"}}
    enriched = learner._enrich_event(e)
    assert enriched["region"] == "web"
    assert "severity" in enriched
    assert "human_summary" in enriched

def test_mini_predictor_scores_new_vuln(learner):
    e = {"target": "1.2.3.4", "vuln": {"id": "new"}, "severity": 9, "raw": {"detail": "rce"}}
    score = learner._mini_predictor(e)
    assert score > MIN_INTEREST_SCORE

def test_update_local_knowledge(learner):
    e = {"target": "1.2.3.4", "vuln": {"id": "sql"}, "status": "open", "timestamp": learner._now_ts()}
    learner._update_local_knowledge(e)
    assert "sql" in learner.local_knowledge["1.2.3.4"]

def test_on_learn_from_exploitation_escalates(learner, mock_bus):
    high_event = {
        "target": "1.2.3.4",
        "vulnerabilities": [{"id": "critical"}],
        "status": "open"
    }
    learner._on_learn_from_exploitation([high_event])
    assert mock_bus.publish_task.called
