import pytest
from back_end.pentest_orchestrator import PentestOrchestrator

class DummyBus:
    def publish_task(self, task): pass
    def subscribe(self, t, cb): pass

class DummyDB:
    def __init__(self):
        self.results = type("C", (), {"insert_one": lambda *a, **k: None})()
        self.learning_data = type("C", (), {"find": lambda *a, **k: []})()

@pytest.fixture
def orchestrator():
    return PentestOrchestrator(bus=DummyBus(), db=DummyDB())

@pytest.mark.asyncio
async def test_ipv4_single(orchestrator: PentestOrchestrator):
    resp = await orchestrator.submit_scan_request(
        region="network",
        scan_type="enum",
        scope="black",
        target=["192.168.1.10"],
        attack_surface=["Open ports"]
    )
    print("IPv4 Single =>", resp["message"])

@pytest.mark.asyncio
async def test_ipv4_cidr(orchestrator: PentestOrchestrator):
    resp = await orchestrator.submit_scan_request(
        region="network",
        scan_type="enum",
        scope="black",
        target=["192.168.1.0/24"],
        subnet_mask=True,
        attack_surface=["Open ports"]
    )
    print("IPv4 CIDR =>", resp["message"])

@pytest.mark.asyncio
async def test_ipv6_single(orchestrator: PentestOrchestrator):
    resp = await orchestrator.submit_scan_request(
        region="network",
        scan_type="enum",
        scope="black",
        target=["2001:db8::1"],
        attack_surface=["Open ports"]
    )
    print("IPv6 Single =>", resp["message"])

@pytest.mark.asyncio
async def test_ipv6_range(orchestrator: PentestOrchestrator):
    resp = await orchestrator.submit_scan_request(
        region="network",
        scan_type="enum",
        scope="black",
        target=["2001:db8::1-2001:db8::5"],
        subnet_mask=True,
        attack_surface=["Open ports"]
    )
    print("IPv6 Range =>", resp["message"])
