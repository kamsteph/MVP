# tests/integration/test_full_network_flow.py
import pytest
from unittest.mock import MagicMock, AsyncMock

from Network_Pentest.network.network_manager import NetworkManager
from Network_Pentest.network import network_manager as nm_mod

@pytest.mark.asyncio
async def test_full_network_flow(monkeypatch):
    fake_db = MagicMock()
    fake_bus = MagicMock()
    fake_local_learner = MagicMock()

    # Patch all sub-managers
    monkeypatch.setattr(nm_mod, "GNNBrain", lambda *a, **k: MagicMock(predict=lambda *a, **k: "exploitation"))
    monkeypatch.setattr(nm_mod, "ExploitationManagerAI", lambda *a, **k: AsyncMock())

    mgr = NetworkManager(fake_bus, fake_local_learner, fake_db)

    # Simulate a recon decision leading to exploitation
    task = {"action": "post_recon_decision", "target": ["192.168.1.5"], "scan_results": {"ip": "192.168.1.5"}}
    await mgr.handle_task(task)

    # Assert DB + bus interactions
    fake_db.save_scan_result.assert_called_once_with({"ip": "192.168.1.5"})
    fake_bus.publish_task.assert_called_once()
    published = fake_bus.publish_task.call_args[0][0]
    assert published["action"] == "run_exploitation"
