# tests/unit/test_vuln_wrappers.py
import pytest
from unittest.mock import patch, AsyncMock

from Network_Pentest.network.vuln_scan_api_wrappers import NaabuAPI, MasscanAPI, NmapAPI

TOP_10_PORTS = [20, 21, 22, 23, 25, 53, 80, 110, 443, 3389]

# -----------------------------
# Naabu wrapper test
# -----------------------------
@pytest.mark.asyncio
@patch("asyncio.create_subprocess_exec")
async def test_naabu_runs_expected_command(mock_exec):
    mock_proc = AsyncMock()
    mock_proc.communicate.return_value = (b"80\n443\n", b"")
    mock_exec.return_value = mock_proc

    api = NaabuAPI()
    res = await api.scan("127.0.0.1", top_ports=10)

    args, kwargs = mock_exec.call_args
    cmd_args = args  # tuple of positional arguments

    # Validate the command includes all expected pieces
    assert "naabu" in cmd_args
    assert "-ports" in cmd_args
    expected_ports = ",".join(str(p) for p in TOP_10_PORTS[:10])
    assert expected_ports in cmd_args
    assert "127.0.0.1" in cmd_args

    # Validate output parsing
    assert res == [80, 443]

# -----------------------------
# Masscan wrapper test
# -----------------------------
@pytest.mark.asyncio
@patch("asyncio.create_subprocess_exec")
async def test_masscan_runs_expected_command(mock_exec):
    mock_proc = AsyncMock()
    mock_proc.communicate.return_value = (b"22\n80\n", b"")
    mock_exec.return_value = mock_proc

    api = MasscanAPI()
    res = await api.scan("127.0.0.1", top_ports=10)

    args, kwargs = mock_exec.call_args
    cmd_args = args

    # Validate the command includes all expected pieces
    assert "masscan" in cmd_args
    assert "-p" in cmd_args
    expected_ports = ",".join(str(p) for p in TOP_10_PORTS[:10])
    assert expected_ports in cmd_args
    assert "127.0.0.1" in cmd_args

    # Validate output parsing
    assert res == [{"port": 22, "state": "open"}, {"port": 80, "state": "open"}]

# -----------------------------
# Nmap wrapper test
# -----------------------------
@pytest.mark.asyncio
@patch("asyncio.create_subprocess_exec")
async def test_nmap_runs_expected_command(mock_exec):
    mock_proc = AsyncMock()
    mock_proc.communicate.return_value = (b"22/tcp open\n80/tcp open\n", b"")
    mock_exec.return_value = mock_proc

    api = NmapAPI()
    res = await api.scan("127.0.0.1", ports=[22, 80])

    args, kwargs = mock_exec.call_args
    cmd_args = args

    # Validate the command includes all expected pieces
    assert "nmap" in cmd_args
    assert "-p" in cmd_args
    assert "22,80" in cmd_args
    assert "127.0.0.1" in cmd_args

    # Validate output parsing
    assert res == [{"port": 22, "state": "open"}, {"port": 80, "state": "open"}]
