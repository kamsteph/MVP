# tests/unit/test_recon_and_manager.py
from unittest.mock import patch, MagicMock

from Network_Pentest.network.recon_network import Recon
import Network_Pentest.network.Sub_Unit_Manager_Network.network_recon_manager as rm


# -------------------
# Recon tests
# -------------------
@patch("subprocess.call", return_value=0)
def test_is_host_alive_success(mock_call):
    assert Recon.is_host_alive("127.0.0.1") is True
    mock_call.assert_called_once()


@patch("subprocess.call", return_value=1)
def test_is_host_alive_dead(mock_call):
    assert Recon.is_host_alive("192.168.1.100") is False


@patch("subprocess.call", side_effect=Exception("ping failed"))
def test_is_host_alive_exception(mock_call):
    assert Recon.is_host_alive("10.0.0.1") is False


def test_scan_alive(monkeypatch):
    r = Recon()
    monkeypatch.setattr(r, "is_host_alive", lambda ip: True)
    result = r.scan("127.0.0.1")
    assert result == {"target": "127.0.0.1", "alive": True}


def test_scan_dead(monkeypatch):
    r = Recon()
    monkeypatch.setattr(r, "is_host_alive", lambda ip: False)
    result = r.scan("10.0.0.2")
    assert result == {"target": "10.0.0.2", "alive": False}


# -------------------
# ReconManager tests
# -------------------
def test_manager_run_scan_success(monkeypatch):
    fake_db = MagicMock()
    fake_bus = MagicMock()

    # Patch ReconScanner with dummy implementation
    fake_scanner = MagicMock()
    fake_scanner.scan.return_value = {"alive": True}
    monkeypatch.setattr(rm, "ReconScanner", lambda *a, **kw: fake_scanner)

    manager = rm.ReconManager(fake_bus, fake_db)
    task = {"id": "task1", "target": ["127.0.0.1"], "hints": {}, "research": "note"}
    manager.run_scan(task)

    fake_db.save_scan_result.assert_called_once()
    fake_bus.publish_task.assert_called_once()
    args, kwargs = fake_db.save_scan_result.call_args
    saved = args[0]
    assert saved["type"] == "network_recon"
    assert "127.0.0.1" in saved["results"]


def test_manager_empty_targets(monkeypatch):
    fake_db = MagicMock()
    fake_bus = MagicMock()
    monkeypatch.setattr(rm, "ReconScanner", lambda *a, **kw: MagicMock())

    manager = rm.ReconManager(fake_bus, fake_db)
    manager.run_scan({"id": "task2", "target": []})

    fake_db.save_scan_result.assert_not_called()
    fake_bus.publish_task.assert_not_called()


def test_manager_scan_failure(monkeypatch):
    fake_db = MagicMock()
    fake_bus = MagicMock()

    fake_scanner = MagicMock()
    fake_scanner.scan.side_effect = Exception("boom")
    monkeypatch.setattr(rm, "ReconScanner", lambda *a, **kw: fake_scanner)

    manager = rm.ReconManager(fake_bus, fake_db)
    manager.run_scan({"id": "task3", "target": ["10.0.0.3"]})

    fake_db.save_scan_result.assert_called_once()
    saved = fake_db.save_scan_result.call_args[0][0]
    assert "error" in saved["results"]["10.0.0.3"]
    fake_bus.publish_task.assert_called_once()
