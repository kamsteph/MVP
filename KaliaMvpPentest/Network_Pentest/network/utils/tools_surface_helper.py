# new_module/api_wrappers/capability_resolver.py
from typing import List

from Network_Pentest.network.tool.base_class import resolve_tool
from back_end.network_cap_matrix import NETWORK_CAPABILITY_MATRIX


def tools_for_surface(attack_surface: str, prefer_modes=("api","cli")):
    """
    Return list of instantiated tools available for this surface, in best-to-worst order.
    This:
      1) reads capability matrix for recommended tool names
      2) resolves actual registered implementations (preferring api, then cli)
      3) drops absent tools
    """
    candidates = []
    for e in NETWORK_CAPABILITY_MATRIX:
        if e["attack_surface"].lower() == attack_surface.lower():
            candidates = [t["name"].lower() for t in e.get("tools", [])]
            break
    resolved = []
    for name in candidates:
        tool = resolve_tool(name, preferred_modes=prefer_modes)
        if tool:
            resolved.append(tool)
    return resolved
