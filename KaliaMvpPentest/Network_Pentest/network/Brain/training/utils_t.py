import os, random, numpy as np, torch

def set_global_seed(seed: int = 42):
    os.environ["PYTHONHASHSEED"] = str(seed)
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(seed)

def compute_class_weights_from_labels(y_tensor: torch.Tensor, num_classes: int):
    if y_tensor.numel() == 0:
        return None
    counts = torch.bincount(y_tensor.cpu())
    if counts.numel() < num_classes:
        counts = torch.cat([counts, torch.zeros(num_classes - counts.numel(), dtype=counts.dtype)])
    weights = 1.0 / (counts.float() + 1e-6)
    weights = weights / weights.sum() * num_classes
    return weights
