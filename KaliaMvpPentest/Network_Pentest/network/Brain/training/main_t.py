import argparse

from Network_Pentest.network.Brain.training.config_t import DEFAULT_EPOCHS, DEFAULT_BATCH_SIZE
from Network_Pentest.network.Brain.training.ddp_setup import setup_ddp
from Network_Pentest.network.Brain.training.unified_trainer import UnifiedTrainer
from Network_Pentest.network.Brain.training.utils_t import set_global_seed

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--device", default=None)
    parser.add_argument("--train-network", action="store_true")
    parser.add_argument("--train-vuln", action="store_true")
    parser.add_argument("--train-exploit", action="store_true")
    parser.add_argument("--epochs", type=int, default=DEFAULT_EPOCHS)
    parser.add_argument("--batch-size", type=int, default=DEFAULT_BATCH_SIZE)
    return parser.parse_args()

def main():
    # ---- Setup DDP / device ----
    device, local_rank = setup_ddp()

    # ---- Parse CLI arguments ----
    args = parse_args()

    # ---- Reproducibility ----
    set_global_seed(2025)

    # ---- Initialize trainer ----
    trainer = UnifiedTrainer(device=device)

    # ---- Determine which models to train ----
    train_all = not (args.train_network or args.train_vuln or args.train_exploit)

    if train_all or args.train_network:
        print("Training NetworkManagerGNN...")
        trainer.train_network_gnn(
            epochs=args.epochs,
            batch_size=args.batch_size
        )

    if train_all or args.train_vuln:
        print("Training VulnerabilityManagerGNN...")
        trainer.train_vuln_gnn(
            epochs=args.epochs,
            batch_size=args.batch_size
        )

    if train_all or args.train_exploit:
        print("Training ExploitManagerGNN...")
        trainer.train_exploit_gnn(
            epochs=args.epochs,
            batch_size=args.batch_size
        )

    # ---- Cleanup DDP if used ----
    import torch.distributed as dist
    if dist.is_initialized():
        dist.destroy_process_group()
        print("[DDP] Cleaned up process group.")
