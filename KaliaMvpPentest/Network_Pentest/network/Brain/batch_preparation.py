# data_pipeline/batch_prep.py
import torch
from torch import nn
from torch_geometric.loader import NeighborLoader

class BatchPrep:
    def __init__(self, graph, batch_size=512, num_neighbors=None, shuffle=True):
        if num_neighbors is None:
            num_neighbors = [10, 5]
        self.graph = graph
        self.batch_size = batch_size
        self.num_neighbors = num_neighbors
        self.shuffle = shuffle

    def get_loader(self):
        return NeighborLoader(
            self.graph,
            batch_size=self.batch_size,
            num_neighbors=self.num_neighbors,
            shuffle=self.shuffle
        )


class FocalLoss(nn.Module):
    def __init__(self, alpha=1, gamma=2):
        super().__init__()
        self.alpha = alpha
        self.gamma = gamma

    def forward(self, inputs, targets):
        ce_loss = nn.functional.cross_entropy(inputs, targets, reduction='none')
        pt = torch.exp(-ce_loss)
        return (self.alpha * (1 - pt) ** self.gamma * ce_loss).mean()
