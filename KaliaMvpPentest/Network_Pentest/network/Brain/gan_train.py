# new_module/deception_gan_train.py
"""
GAN Training Module for Honeynet Configuration Synthesis
Used only in training or offline simulation mode.
"""

import torch
import torch.nn as nn
import torch.optim as optim
from tqdm import tqdm

from defense.deception_learning import HoneynetGenerator, HoneynetDiscriminator


class HoneynetGANTrainer:
    def __init__(self, noise_dim=16, config_dim=32, device="cpu"):
        self.device = torch.device(device)
        self.generator = HoneynetGenerator(noise_dim, config_dim).to(self.device)
        self.discriminator = HoneynetDiscriminator(config_dim).to(self.device)

        self.opt_G = optim.Adam(self.generator.parameters(), lr=1e-3)
        self.opt_D = optim.Adam(self.discriminator.parameters(), lr=1e-3)
        self.criterion = nn.BCELoss()

    def train(self, epochs=200, batch_size=32):
        for epoch in range(epochs):
            for _ in tqdm(range(batch_size), desc=f"Epoch {epoch+1}/{epochs}"):
                # --- Train Discriminator ---
                real_data = torch.randn(batch_size, 32).to(self.device)
                real_labels = torch.ones(batch_size, 1).to(self.device)

                noise = torch.randn(batch_size, 16).to(self.device)
                fake_data = self.generator(noise)
                fake_labels = torch.zeros(batch_size, 1).to(self.device)

                self.opt_D.zero_grad()
                pred_real = self.discriminator(real_data)
                pred_fake = self.discriminator(fake_data.detach())
                loss_D = self.criterion(pred_real, real_labels) + self.criterion(pred_fake, fake_labels)
                loss_D.backward()
                self.opt_D.step()

                # --- Train Generator ---
                self.opt_G.zero_grad()
                pred_fake = self.discriminator(fake_data)
                loss_G = self.criterion(pred_fake, real_labels)
                loss_G.backward()
                self.opt_G.step()

            print(f"[GAN] Epoch {epoch+1} | LossD: {loss_D.item():.4f} | LossG: {loss_G.item():.4f}")

        torch.save(self.generator.state_dict(), "honeynet_generator.pt")
        torch.save(self.discriminator.state_dict(), "honeynet_discriminator.pt")
        print("âœ… GAN training complete and models saved.")
