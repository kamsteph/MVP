import torch
import torch.nn as nn
import torch.nn.functional as F
from torch_geometric.data import Data
from torch_geometric.nn import GCNConv

class VulnScanGNN(nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels):
        super().__init__()
        self.conv1 = GCNConv(in_channels, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, out_channels)

    def forward(self, x, edge_index):
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        return F.log_softmax(x, dim=1)

class VulnScanBrain:
    def __init__(self, model_path=None, in_channels=6):
        self.model = VulnScanGNN(in_channels=in_channels, hidden_channels=8, out_channels=4)
        if model_path:
            self.model.load_state_dict(torch.load(model_path))
        self.model.eval()

    def predict(self, scan_results, memory_features=None):
        graph = self._build_graph(scan_results, memory_features)
        with torch.no_grad():
            out = self.model(graph.x, graph.edge_index)
            out_mean = out.mean(dim=0)
            pred_idx = out_mean.argmax().item()
        return pred_idx  # map to scan action

    def _build_graph(self, scan_results, memory_features=None):
        nodes = []
        edges = []

        for idx, res in enumerate(scan_results):
            features = [
                len(res.get("open_ports", [])),
                len(res.get("services", [])),
                1 if res.get("last_scan_type") == "top-100" else 0,
                1 if res.get("last_scan_type") == "top-1000" else 0,
                len(res.get("vulnerabilities", [])),
                memory_features[idx] if memory_features is not None else 0
            ]
            nodes.append(features)
            if idx > 0:
                edges.append([idx-1, idx])

        x = torch.tensor(nodes, dtype=torch.float)
        edge_index = torch.tensor(edges, dtype=torch.long).t().contiguous() if edges else torch.empty((2,0), dtype=torch.long)
        return Data(x=x, edge_index=edge_index)
