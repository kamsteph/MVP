import torch
import torch.nn as nn
import torch.nn.functional as F
from torch_geometric.data import Data
from torch_geometric.nn import GCNConv
class ExploitGNN(nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels):
        super().__init__()
        self.conv1 = GCNConv(in_channels, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, out_channels)

    def forward(self, x, edge_index):
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        return torch.sigmoid(x)  # probability of attempt

class ExploitBrain:
    def __init__(self, model_path=None, in_channels=6):
        self.model = ExploitGNN(in_channels=in_channels, hidden_channels=8, out_channels=1)
        if model_path:
            self.model.load_state_dict(torch.load(model_path))
        self.model.eval()

    def rank_candidates(self, candidates, memory_features=None):
        graph = self._build_graph(candidates, memory_features)
        with torch.no_grad():
            probs = self.model(graph.x, graph.edge_index).squeeze()

        # Ensure probs is at least 1D
        if probs.ndim == 0:
            probs = probs.unsqueeze(0)

        return probs.argsort(descending=True).tolist()

    def _build_graph(self, candidates, memory_features=None):
        nodes = []
        edges = []

        for idx, c in enumerate(candidates):
            features = [
                c.get("severity", 0),
                c.get("port", 0),
                1 if c.get("service", "").lower()=="http" else 0,
                1 if c.get("previous_success", False) else 0,
                c.get("exploit_age", 0),
                memory_features[idx] if memory_features is not None else 0
            ]
            nodes.append(features)
            if idx > 0:
                edges.append([idx-1, idx])

        x = torch.tensor(nodes, dtype=torch.float)
        edge_index = torch.tensor(edges, dtype=torch.long).t().contiguous() if edges else torch.empty((2,0), dtype=torch.long)
        return Data(x=x, edge_index=edge_index)
