# new_module/recon_manager.py
from typing import Dict, Any
import asyncio

from Network_Pentest.network.Sub_Unit_Manager_Network.network_vuln_manager import VulnScanManager
from Network_Pentest.network.recon_scanner import ReconScanner
from back_end.utils.colored_logger import get_logger
from back_end.database import DatabaseManager
from back_end.event_bus import EventBus

logger = get_logger(__name__, component="RECON", region="NETWORK")


class ReconManager:
    """
    Orchestrator for network reconnaissance.
    Handles tasks, coordinates ReconScanner, and publishes results.
    """
    def __init__(self, bus: EventBus, db: DatabaseManager, vulnscan_mgr: VulnScanManager):
        self.bus = bus
        self.db = db
        self.scanner = ReconScanner(vulnscan_mgr)

        # Subscribe to events
        self.bus.subscribe("network_recon_scan", self.run_scan)
        logger.info("ReconManager initialized and listening for 'network_recon_scan' events.")

    def run_scan(self, task: Dict[str, Any]):
        """Entry point from event bus. Spawns async scan."""
        task_id = task.get("id")
        targets = task.get("target", [])
        research_notes = task.get("research")
        hints = task.get("hints", {})

        if not task_id:
            logger.error("ReconManager received a task without task_id")
            return

        if not targets:
            logger.warning(f"ReconManager received empty targets for task {task_id}")
            return

        logger.info(f"[ReconManager] Starting scan for task {task_id} on targets {targets}")
        if research_notes:
            logger.info(f"[ReconManager] Research bias: {research_notes}")
        if hints:
            logger.info(f"[ReconManager] Hints: {hints}")

        asyncio.create_task(self._scan_and_publish(task_id, targets, research_notes, hints))

    async def _scan_and_publish(self, task_id: str, targets: list, research_notes: str, hints: dict):
        results = {}
        for t in targets:
            try:
                results[t] = await self.scanner.scan(task_id, t,hints=hints)
            except Exception as e:
                logger.error(f"Scan failed for {t} (task {task_id}): {e}")
                results[t] = {"task_id": task_id, "target": t, "alive": False, "error": str(e)}

        # Save results with task_id
        scan_summary = {
            "task_id": task_id,
            "type": "network_recon",
            "targets": targets,
            "results": results,
            "hints": hints,
            "research": research_notes
        }
        self.db.save_scan_result(scan_summary)

        # Publish for vuln scan stage (optional, if others listen downstream)
        self.bus.publish_task({
            "id": task_id,
            "region": "network",
            "action": "run_vuln_scan",
            "target": targets,
            "scan_results": results,
            "hints": hints,
            "research": research_notes
        })
        logger.info(f"[ReconManager] Published 'run_vuln_scan' for task {task_id}")
