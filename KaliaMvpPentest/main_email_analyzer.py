# main.py
import argparse
import json
import os
import sys
from typing import List, Optional, Dict, Any

# Web OSINT imports
from Web_Pentest.web.web_osint import gather_main_osint_info, gather_social_osint_info

# Email analyzer imports
from email_analyzer import load_email, gather_mail_analysis

# ------------------ Helper for pretty printing ------------------
def pretty_print_section(title: str, data: Any) -> None:
    print("\n" + "=" * 60)
    print(f"{title}")
    print("=" * 60)
    if data is None or data == {}:
        print("(no data)")
        return
    if isinstance(data, (str, int, float)):
        print(data)
    elif isinstance(data, dict) and len(data) <= 8:
        for k, v in data.items():
            print(f"{k}: {v}")
    else:
        try:
            print(json.dumps(data, indent=4, ensure_ascii=False))
        except Exception:
            print(repr(data))

# ------------------ Run Web/Social OSINT ------------------
def run_osint(url: Optional[str] = None,
              social_urls: Optional[List[str]] = None,
              pretty: bool = True,
              out_file: Optional[str] = None) -> Dict[str, Any]:
    results: Dict[str, Any] = {}

    if url:
        print(f"[+] Running Web OSINT for {url}")
        results["web_osint"] = gather_main_osint_info(url)
    else:
        print("[!] No URL provided to run web OSINT.")

    if social_urls:
        print(f"[+] Running Social OSINT for {len(social_urls)} URL(s)")
        results["social_osint"] = gather_social_osint_info(social_urls)

    if pretty and "web_osint" in results:
        web = results["web_osint"]
        pretty_print_section("HTTP Headers", web.get("headers"))
        pretty_print_section("DNS (A / MX / NS)", web.get("dns"))
        pretty_print_section("Resolved IP", web.get("ip"))
        pretty_print_section("Reverse DNS (PTR)", web.get("reverse_dns"))
        pretty_print_section("RDAP / WHOIS", web.get("rdap"))
        pretty_print_section("Shodan", web.get("shodan"))

        if "social_osint" in results:
            pretty_print_section("Social OSINT (status codes)", results["social_osint"])

    # Save to file if requested
    if out_file:
        try:
            with open(out_file, "w", encoding="utf-8") as f:
                json.dump(results, f, indent=4, ensure_ascii=False)
            print(f"\n[+] Results written to {out_file}")
        except Exception as e:
            print(f"[!] Failed to write output to {out_file}: {e}", file=sys.stderr)

    return results

# ------------------ Run Email Analyzer ------------------
def run_email_analysis(email_path: str, pretty: bool = True, out_file: Optional[str] = None) -> Dict[str, Any]:
    try:
        msg = load_email(email_path)
        results = gather_mail_analysis(msg)
    except Exception as e:
        print(f"[!] Failed to analyze email: {e}", file=sys.stderr)
        return {}

    if pretty:
        print("\n==== EMAIL ANALYSIS SUMMARY ====")
        print(f"Subject: {results.get('subject')}")
        print(f"From: {results.get('from')}")
        print(f"To: {results.get('to')}")
        print(f"Received IPs: {results.get('received_unique_ips')}")
        print(f"Top URLs: {results.get('urls')[:10]}")
        attachments = results.get('attachments', [])
        print(f"Attachments: {[a.get('filename') for a in attachments]}")
        print("Indicators:", results.get("indicators", []))
        print("==== END SUMMARY ====\n")

    if out_file:
        try:
            with open(out_file, "w", encoding="utf-8") as f:
                json.dump(results, f, indent=4, ensure_ascii=False)
            print(f"[+] Email analysis results written to {out_file}")
        except Exception as e:
            print(f"[!] Failed to write email output to {out_file}: {e}", file=sys.stderr)

    return results

# ------------------ CLI Parser ------------------
def parse_args_and_run() -> None:
    parser = argparse.ArgumentParser(description="OSINT Toolkit + Email Analyzer")
    parser.add_argument("--url", help="Target URL for web OSINT (e.g. https://example.com)")
    parser.add_argument("--social", nargs="*", help="List of social media profile URLs to check")
    parser.add_argument("--email", help="Path to raw email file (.eml) to analyze")
    parser.add_argument("--env-target", action="store_true", help="Read target URL from OSINT_TARGET env var")
    parser.add_argument("--no-pretty", action="store_true", help="Disable pretty printing")
    parser.add_argument("--out", help="Write full JSON output to file (e.g. --out results.json)")
    args = parser.parse_args()

    env_url = None
    if args.env_target:
        env_url = os.getenv("OSINT_TARGET")
        if not env_url:
            print("[!] Environment variable OSINT_TARGET not set.")

    target_url = args.url or env_url

    if args.email:
        run_email_analysis(email_path=args.email, pretty=not args.no_pretty, out_file=args.out)
    elif target_url or args.social:
        run_osint(url=target_url, social_urls=args.social, pretty=not args.no_pretty, out_file=args.out)
    else:
        parser.print_help()

# ------------------ Main ------------------
if __name__ == "__main__":
    parse_args_and_run()
